{"ast":null,"code":"var _jsxFileName = \"/Users/developmentsigncast.ca/Desktop/caster-final/src/components/caster/Caster.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { List, Plus, Cast, Square } from \"lucide-react\";\nimport socket, { emitCastingState, emitMediaChange, emitPlaybackState, emitTimeUpdate, emitVolumeChange, emitPlaylistUpdate, getSocketId } from \"../../services/socketService\";\nimport MediaControls from \"./MediaControls\";\nimport PlaylistSidebar from \"./PlaylistSidebar\";\nimport DirectoryModal from \"./DirectoryModal\";\n\n// Caster component - full-featured media player and playlist management\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Caster() {\n  _s();\n  const [playlist, setPlaylist] = useState([]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [volume, setVolume] = useState(1);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [autoplay, setAutoplay] = useState(() => {\n    return localStorage.getItem(\"autoplay\") === \"true\";\n  });\n  const [directories, setDirectories] = useState([]);\n  const [activeDirectory, setActiveDirectory] = useState(null);\n  const [showPlaylist, setShowPlaylist] = useState(true);\n  const [isCasting, setIsCasting] = useState(false);\n  const [showDirectoryModal, setShowDirectoryModal] = useState(false);\n  const [sessionUrl, setSessionUrl] = useState(\"\");\n  const [isDatabasePlaylist, setIsDatabasePlaylist] = useState(false);\n  const mediaRef = useRef(null);\n\n  // Function to add a directory and its media files\n  const addDirectory = (directoryName, mediaItems) => {\n    if (!directoryName || mediaItems.length === 0) return;\n    if (isDatabasePlaylist) {\n      // For database mode, just add the items to the playlist\n      const newPlaylist = [...playlist, ...mediaItems];\n      setPlaylist(newPlaylist);\n\n      // Notify player about playlist update if casting\n      if (isCasting) {\n        emitPlaylistUpdate(newPlaylist);\n      }\n    } else {\n      // For local mode, create a directory with its media items\n      const directoryId = Date.now();\n      const newDirectory = {\n        id: directoryId,\n        name: directoryName,\n        items: mediaItems.map(item => ({\n          ...item,\n          directoryId\n        }))\n      };\n\n      // Add the directory to the list\n      setDirectories([...directories, newDirectory]);\n\n      // Add the media items to the playlist with directory ID\n      const newPlaylist = [...playlist, ...newDirectory.items];\n      setPlaylist(newPlaylist);\n\n      // Set this as the active directory\n      setActiveDirectory(directoryId);\n\n      // Notify player about playlist update if casting\n      if (isCasting) {\n        emitPlaylistUpdate(newPlaylist);\n      }\n    }\n  };\n\n  // Function to remove a directory and its files\n  const removeDirectory = dirId => {\n    // Find the directory to remove\n    const dirToRemove = directories.find(dir => dir.id === dirId);\n    if (!dirToRemove) return;\n\n    // Remove the directory from the list\n    const newDirectories = directories.filter(dir => dir.id !== dirId);\n    setDirectories(newDirectories);\n\n    // Remove all media items that belong to this directory\n    const newPlaylist = playlist.filter(item => item.directoryId !== dirId);\n    setPlaylist(newPlaylist);\n\n    // Update player if casting\n    if (isCasting) {\n      emitPlaylistUpdate(newPlaylist);\n    }\n\n    // If we removed the active directory, set active to null\n    if (activeDirectory === dirId) {\n      setActiveDirectory(null);\n    }\n\n    // If we removed the current playing item's directory, adjust currentIndex\n    if (currentIndex >= newPlaylist.length) {\n      setCurrentIndex(Math.max(0, newPlaylist.length - 1));\n    }\n  };\n\n  // Function to toggle directory view\n  const toggleDirectoryView = dirId => {\n    if (activeDirectory === dirId) {\n      // If clicking the already active directory, close it\n      setActiveDirectory(null);\n    } else {\n      // Otherwise, set this directory as active\n      setActiveDirectory(dirId);\n    }\n  };\n  const removeFromPlaylist = id => {\n    const newPlaylist = playlist.filter(item => item.id !== id);\n    setPlaylist(newPlaylist);\n    if (isCasting) {\n      emitPlaylistUpdate(newPlaylist);\n    }\n\n    // If we removed the current item, adjust currentIndex\n    if (currentIndex >= newPlaylist.length) {\n      setCurrentIndex(Math.max(0, newPlaylist.length - 1));\n    }\n  };\n  const playMedia = index => {\n    setCurrentIndex(index);\n    setIsPlaying(true);\n\n    // Notify player if casting\n    if (isCasting) {\n      emitMediaChange({\n        index,\n        item: playlist[index],\n        isPlaying: true\n      });\n    }\n  };\n  const togglePlay = () => {\n    const newPlayingState = !isPlaying;\n    setIsPlaying(newPlayingState);\n    if (isCasting) {\n      emitPlaybackState({\n        isPlaying: newPlayingState\n      });\n    }\n  };\n  const handleNext = () => {\n    if (playlist.length === 0) return;\n    const nextIndex = (currentIndex + 1) % playlist.length;\n    playMedia(nextIndex);\n  };\n  const handlePrevious = () => {\n    if (playlist.length === 0) return;\n    const prevIndex = (currentIndex - 1 + playlist.length) % playlist.length;\n    playMedia(prevIndex);\n  };\n  const handleVolumeChange = e => {\n    const newVolume = parseFloat(e.target.value);\n    setVolume(newVolume);\n    if (mediaRef.current) {\n      mediaRef.current.volume = newVolume;\n    }\n    if (isCasting) {\n      emitVolumeChange({\n        volume: newVolume\n      });\n    }\n  };\n  const handleTimeUpdate = () => {\n    if (mediaRef.current) {\n      const currentTime = mediaRef.current.currentTime;\n      setCurrentTime(currentTime);\n      if (isCasting) {\n        emitTimeUpdate({\n          currentTime,\n          timestamp: Date.now(),\n          isSeeking: false\n        });\n      }\n    }\n  };\n  const handleSeek = e => {\n    const newTime = parseFloat(e.target.value);\n    setCurrentTime(newTime);\n    if (mediaRef.current) {\n      // Set the new time\n      mediaRef.current.currentTime = newTime;\n\n      // If we were playing, resume playback\n      if (isPlaying) {\n        mediaRef.current.play().catch(console.error);\n      }\n    }\n    if (isCasting) {\n      // Send seek event\n      socket.emit('seek', {\n        targetTime: newTime,\n        timestamp: Date.now()\n      });\n\n      // Send immediate time update with seeking flag\n      emitTimeUpdate({\n        currentTime: newTime,\n        timestamp: Date.now(),\n        isSeeking: true\n      });\n    }\n  };\n  const toggleAutoplay = () => {\n    const newAutoplay = !autoplay;\n    setAutoplay(newAutoplay);\n    localStorage.setItem(\"autoplay\", newAutoplay.toString());\n  };\n  const handleFullscreen = () => {\n    if (mediaRef.current) {\n      if (mediaRef.current.requestFullscreen) {\n        mediaRef.current.requestFullscreen();\n      }\n    }\n  };\n  const toggleCasting = () => {\n    const newCastingState = !isCasting;\n    setIsCasting(newCastingState);\n\n    // Generate a session URL when starting to cast\n    if (newCastingState) {\n      const socketId = getSocketId();\n      console.log(\"Starting cast with socket ID:\", socketId);\n      // Use your actual IP address instead of window.location.origin\n      const baseUrl = \"http://192.168.0.161:3000\";\n      const newSessionUrl = `${baseUrl}/player?session=${socketId}`;\n      setSessionUrl(newSessionUrl);\n\n      // If we have a video playing, send an immediate time update\n      if (mediaRef.current && isPlaying) {\n        emitTimeUpdate({\n          currentTime: mediaRef.current.currentTime,\n          timestamp: Date.now(),\n          isSeeking: true\n        });\n      }\n    } else {\n      setSessionUrl(\"\");\n    }\n\n    // Notify player about casting state\n    const castingData = {\n      isCasting: newCastingState,\n      // If starting to cast, send current state\n      ...(newCastingState && {\n        playlist,\n        currentIndex,\n        currentItem: playlist[currentIndex] || null,\n        isPlaying,\n        currentTime: mediaRef.current ? mediaRef.current.currentTime : 0,\n        volume,\n        autoplay\n      })\n    };\n    console.log(\"Emitting casting state:\", castingData);\n    emitCastingState(castingData);\n  };\n\n  // Handle media ended event\n  const handleMediaEnded = () => {\n    if (autoplay && playlist.length > 0) {\n      handleNext();\n    } else {\n      setIsPlaying(false);\n      if (isCasting) {\n        emitPlaybackState({\n          isPlaying: false\n        });\n      }\n    }\n  };\n\n  // Effect to handle socket events from Player\n  useEffect(() => {\n    console.log(\"Setting up request_state listener\");\n    socket.on(\"request_state\", () => {\n      console.log(\"Received request_state, isCasting:\", isCasting);\n      if (isCasting) {\n        // Send current state to player\n        const stateData = {\n          isCasting: true,\n          playlist,\n          currentIndex,\n          currentItem: playlist[currentIndex] || null,\n          isPlaying,\n          currentTime,\n          volume,\n          autoplay\n        };\n        console.log(\"Sending state in response:\", stateData);\n        emitCastingState(stateData);\n      }\n    });\n    return () => {\n      console.log(\"Cleaning up request_state listener\");\n      socket.off(\"request_state\");\n    };\n  }, [playlist, currentIndex, isPlaying, currentTime, volume, autoplay, isCasting]);\n\n  // Effect to sync media playback state when it changes\n  useEffect(() => {\n    if (mediaRef.current) {\n      if (isPlaying) {\n        mediaRef.current.play().catch(e => console.error(\"Playback error:\", e));\n      } else {\n        mediaRef.current.pause();\n      }\n    }\n  }, [isPlaying, currentIndex, playlist]);\n\n  // Effect to handle duration change\n  useEffect(() => {\n    const handleDurationChange = () => {\n      if (mediaRef.current) {\n        setDuration(mediaRef.current.duration || 0);\n      }\n    };\n    const mediaElement = mediaRef.current;\n    if (mediaElement) {\n      mediaElement.addEventListener(\"durationchange\", handleDurationChange);\n      mediaElement.addEventListener(\"loadedmetadata\", handleDurationChange);\n    }\n    return () => {\n      if (mediaElement) {\n        mediaElement.removeEventListener(\"durationchange\", handleDurationChange);\n        mediaElement.removeEventListener(\"loadedmetadata\", handleDurationChange);\n      }\n    };\n  }, [currentIndex, playlist]);\n\n  // Current media item\n  const currentItem = playlist[currentIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col h-screen\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"bg-gray-800 p-4 flex justify-between items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center space-x-4\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-2xl font-bold text-teal-400\",\n          children: \"Media Caster\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center space-x-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center\",\n          children: [isCasting && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mr-4 bg-gray-700 px-3 py-1 rounded flex items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-sm text-gray-300 mr-2\",\n              children: \"Session URL:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 387,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: sessionUrl,\n              readOnly: true,\n              className: \"bg-gray-800 text-xs text-gray-300 px-2 py-1 rounded w-48\",\n              onClick: e => e.target.select()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 388,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center space-x-2 mr-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-sm text-gray-300\",\n              children: \"Playlist Source:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 398,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"relative inline-flex h-6 w-11 items-center rounded-full bg-gray-700 transition-colors focus:outline-none focus:ring-2 focus:ring-teal-500 focus:ring-offset-2\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: `${isDatabasePlaylist ? 'translate-x-6' : 'translate-x-1'} inline-block h-4 w-4 transform rounded-full bg-white transition-transform`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 400,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => setIsDatabasePlaylist(!isDatabasePlaylist),\n                className: \"absolute inset-0 w-full h-full rounded-full\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"sr-only\",\n                  children: \"Switch playlist source\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 409,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 405,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 399,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-sm text-gray-300\",\n              children: isDatabasePlaylist ? \"Database\" : \"Local\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 412,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: toggleCasting,\n            className: `flex items-center space-x-1 px-3 py-1 rounded ${isCasting ? \"bg-red-600 hover:bg-red-700\" : \"bg-teal-600 hover:bg-teal-700\"}`,\n            children: isCasting ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(Square, {\n                size: 16\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 426,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Stop Casting\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 427,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(Cast, {\n                size: 16\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 431,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Start Casting\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 432,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowPlaylist(!showPlaylist),\n          className: \"p-2 rounded-full hover:bg-gray-700\",\n          children: /*#__PURE__*/_jsxDEV(List, {\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 441,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowDirectoryModal(true),\n          className: \"flex items-center space-x-1 bg-teal-600 hover:bg-teal-700 px-3 py-1 rounded\",\n          children: [/*#__PURE__*/_jsxDEV(Plus, {\n            size: 16\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 447,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: isDatabasePlaylist ? \"Upload to Database\" : \"Add Directory\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 448,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-1 overflow-hidden\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `flex-1 p-4 flex flex-col ${showPlaylist ? \"w-2/3\" : \"w-full\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex-1 bg-gray-800 rounded-lg overflow-hidden flex items-center justify-center\",\n          children: currentItem && currentItem.type === \"video\" ? /*#__PURE__*/_jsxDEV(\"video\", {\n            ref: mediaRef,\n            src: currentItem.path,\n            className: \"max-h-full max-w-full\",\n            onTimeUpdate: handleTimeUpdate,\n            onEnded: handleMediaEnded\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 462,\n            columnNumber: 15\n          }, this) : currentItem && currentItem.type === \"image\" ? /*#__PURE__*/_jsxDEV(\"img\", {\n            src: currentItem.path,\n            alt: currentItem.name,\n            className: \"max-h-full max-w-full object-contain\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 470,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-gray-500\",\n            children: \"No media selected\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 476,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MediaControls, {\n          isPlaying: isPlaying,\n          currentTime: currentTime,\n          duration: duration,\n          volume: volume,\n          autoplay: autoplay,\n          handlePrevious: handlePrevious,\n          handleNext: handleNext,\n          togglePlay: togglePlay,\n          handleSeek: handleSeek,\n          handleVolumeChange: handleVolumeChange,\n          toggleAutoplay: toggleAutoplay,\n          handleFullscreen: handleFullscreen\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 9\n      }, this), showPlaylist && /*#__PURE__*/_jsxDEV(PlaylistSidebar, {\n        directories: directories,\n        playlist: playlist,\n        currentIndex: currentIndex,\n        isPlaying: isPlaying,\n        activeDirectory: activeDirectory,\n        toggleDirectoryView: toggleDirectoryView,\n        removeDirectory: removeDirectory,\n        removeFromPlaylist: removeFromPlaylist,\n        playMedia: playMedia,\n        isDatabasePlaylist: isDatabasePlaylist\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DirectoryModal, {\n      isOpen: showDirectoryModal,\n      onClose: () => setShowDirectoryModal(false),\n      onAddDirectory: addDirectory,\n      isDatabasePlaylist: isDatabasePlaylist\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 515,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 378,\n    columnNumber: 5\n  }, this);\n}\n_s(Caster, \"iY85C0Gvt3QmnQNIuHLhsRgQ7pQ=\");\n_c = Caster;\nvar _c;\n$RefreshReg$(_c, \"Caster\");","map":{"version":3,"names":["React","useState","useEffect","useRef","List","Plus","Cast","Square","socket","emitCastingState","emitMediaChange","emitPlaybackState","emitTimeUpdate","emitVolumeChange","emitPlaylistUpdate","getSocketId","MediaControls","PlaylistSidebar","DirectoryModal","jsxDEV","_jsxDEV","Fragment","_Fragment","Caster","_s","playlist","setPlaylist","currentIndex","setCurrentIndex","isPlaying","setIsPlaying","volume","setVolume","currentTime","setCurrentTime","duration","setDuration","autoplay","setAutoplay","localStorage","getItem","directories","setDirectories","activeDirectory","setActiveDirectory","showPlaylist","setShowPlaylist","isCasting","setIsCasting","showDirectoryModal","setShowDirectoryModal","sessionUrl","setSessionUrl","isDatabasePlaylist","setIsDatabasePlaylist","mediaRef","addDirectory","directoryName","mediaItems","length","newPlaylist","directoryId","Date","now","newDirectory","id","name","items","map","item","removeDirectory","dirId","dirToRemove","find","dir","newDirectories","filter","Math","max","toggleDirectoryView","removeFromPlaylist","playMedia","index","togglePlay","newPlayingState","handleNext","nextIndex","handlePrevious","prevIndex","handleVolumeChange","e","newVolume","parseFloat","target","value","current","handleTimeUpdate","timestamp","isSeeking","handleSeek","newTime","play","catch","console","error","emit","targetTime","toggleAutoplay","newAutoplay","setItem","toString","handleFullscreen","requestFullscreen","toggleCasting","newCastingState","socketId","log","baseUrl","newSessionUrl","castingData","currentItem","handleMediaEnded","on","stateData","off","pause","handleDurationChange","mediaElement","addEventListener","removeEventListener","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","readOnly","onClick","select","size","ref","src","path","onTimeUpdate","onEnded","alt","isOpen","onClose","onAddDirectory","_c","$RefreshReg$"],"sources":["/Users/developmentsigncast.ca/Desktop/caster-final/src/components/caster/Caster.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { List, Plus, Cast, Square } from \"lucide-react\";\n\n\nimport socket, {\n  emitCastingState,\n  emitMediaChange,\n  emitPlaybackState,\n  emitTimeUpdate,\n  emitVolumeChange,\n  emitPlaylistUpdate,\n  getSocketId\n} from \"../../services/socketService\";\nimport MediaControls from \"./MediaControls\";\nimport PlaylistSidebar from \"./PlaylistSidebar\";\nimport DirectoryModal from \"./DirectoryModal\";\n\n// Caster component - full-featured media player and playlist management\nexport default function Caster() {\n  const [playlist, setPlaylist] = useState([]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [volume, setVolume] = useState(1);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [autoplay, setAutoplay] = useState(() => {\n    return localStorage.getItem(\"autoplay\") === \"true\";\n  });\n  const [directories, setDirectories] = useState([]);\n  const [activeDirectory, setActiveDirectory] = useState(null);\n  const [showPlaylist, setShowPlaylist] = useState(true);\n  const [isCasting, setIsCasting] = useState(false);\n  const [showDirectoryModal, setShowDirectoryModal] = useState(false);\n  const [sessionUrl, setSessionUrl] = useState(\"\");\n  const [isDatabasePlaylist, setIsDatabasePlaylist] = useState(false);\n\n  const mediaRef = useRef(null);\n\n  // Function to add a directory and its media files\n  const addDirectory = (directoryName, mediaItems) => {\n    if (!directoryName || mediaItems.length === 0) return;\n\n    if (isDatabasePlaylist) {\n      // For database mode, just add the items to the playlist\n      const newPlaylist = [...playlist, ...mediaItems];\n      setPlaylist(newPlaylist);\n\n      // Notify player about playlist update if casting\n      if (isCasting) {\n        emitPlaylistUpdate(newPlaylist);\n      }\n    } else {\n      // For local mode, create a directory with its media items\n      const directoryId = Date.now();\n      const newDirectory = { \n        id: directoryId, \n        name: directoryName,\n        items: mediaItems.map(item => ({ ...item, directoryId }))\n      };\n      \n      // Add the directory to the list\n      setDirectories([...directories, newDirectory]);\n\n      // Add the media items to the playlist with directory ID\n      const newPlaylist = [...playlist, ...newDirectory.items];\n      setPlaylist(newPlaylist);\n\n      // Set this as the active directory\n      setActiveDirectory(directoryId);\n\n      // Notify player about playlist update if casting\n      if (isCasting) {\n        emitPlaylistUpdate(newPlaylist);\n      }\n    }\n  };\n\n  // Function to remove a directory and its files\n  const removeDirectory = (dirId) => {\n    // Find the directory to remove\n    const dirToRemove = directories.find((dir) => dir.id === dirId);\n    if (!dirToRemove) return;\n\n    // Remove the directory from the list\n    const newDirectories = directories.filter((dir) => dir.id !== dirId);\n    setDirectories(newDirectories);\n\n    // Remove all media items that belong to this directory\n    const newPlaylist = playlist.filter((item) => item.directoryId !== dirId);\n    setPlaylist(newPlaylist);\n\n    // Update player if casting\n    if (isCasting) {\n      emitPlaylistUpdate(newPlaylist);\n    }\n\n    // If we removed the active directory, set active to null\n    if (activeDirectory === dirId) {\n      setActiveDirectory(null);\n    }\n\n    // If we removed the current playing item's directory, adjust currentIndex\n    if (currentIndex >= newPlaylist.length) {\n      setCurrentIndex(Math.max(0, newPlaylist.length - 1));\n    }\n  };\n\n  // Function to toggle directory view\n  const toggleDirectoryView = (dirId) => {\n    if (activeDirectory === dirId) {\n      // If clicking the already active directory, close it\n      setActiveDirectory(null);\n    } else {\n      // Otherwise, set this directory as active\n      setActiveDirectory(dirId);\n    }\n  };\n\n  const removeFromPlaylist = (id) => {\n    const newPlaylist = playlist.filter((item) => item.id !== id);\n    setPlaylist(newPlaylist);\n\n    if (isCasting) {\n      emitPlaylistUpdate(newPlaylist);\n    }\n\n    // If we removed the current item, adjust currentIndex\n    if (currentIndex >= newPlaylist.length) {\n      setCurrentIndex(Math.max(0, newPlaylist.length - 1));\n    }\n  };\n\n  const playMedia = (index) => {\n    setCurrentIndex(index);\n    setIsPlaying(true);\n\n    // Notify player if casting\n    if (isCasting) {\n      emitMediaChange({\n        index,\n        item: playlist[index],\n        isPlaying: true,\n      });\n    }\n  };\n\n  const togglePlay = () => {\n    const newPlayingState = !isPlaying;\n    setIsPlaying(newPlayingState);\n\n    if (isCasting) {\n      emitPlaybackState({ isPlaying: newPlayingState });\n    }\n  };\n\n  const handleNext = () => {\n    if (playlist.length === 0) return;\n    const nextIndex = (currentIndex + 1) % playlist.length;\n    playMedia(nextIndex);\n  };\n\n  const handlePrevious = () => {\n    if (playlist.length === 0) return;\n    const prevIndex = (currentIndex - 1 + playlist.length) % playlist.length;\n    playMedia(prevIndex);\n  };\n\n  const handleVolumeChange = (e) => {\n    const newVolume = parseFloat(e.target.value);\n    setVolume(newVolume);\n    if (mediaRef.current) {\n      mediaRef.current.volume = newVolume;\n    }\n\n    if (isCasting) {\n      emitVolumeChange({ volume: newVolume });\n    }\n  };\n\n  const handleTimeUpdate = () => {\n    if (mediaRef.current) {\n      const currentTime = mediaRef.current.currentTime;\n      setCurrentTime(currentTime);\n\n      if (isCasting) {\n        emitTimeUpdate({\n          currentTime,\n          timestamp: Date.now(),\n          isSeeking: false\n        });\n      }\n    }\n  };\n\n  const handleSeek = (e) => {\n    const newTime = parseFloat(e.target.value);\n    setCurrentTime(newTime);\n    \n    if (mediaRef.current) {\n      // Set the new time\n      mediaRef.current.currentTime = newTime;\n      \n      // If we were playing, resume playback\n      if (isPlaying) {\n        mediaRef.current.play().catch(console.error);\n      }\n    }\n\n    if (isCasting) {\n      // Send seek event\n      socket.emit('seek', {\n        targetTime: newTime,\n        timestamp: Date.now()\n      });\n\n      // Send immediate time update with seeking flag\n      emitTimeUpdate({ \n        currentTime: newTime,\n        timestamp: Date.now(),\n        isSeeking: true\n      });\n    }\n  };\n\n  const toggleAutoplay = () => {\n    const newAutoplay = !autoplay;\n    setAutoplay(newAutoplay);\n    localStorage.setItem(\"autoplay\", newAutoplay.toString());\n  };\n\n  const handleFullscreen = () => {\n    if (mediaRef.current) {\n      if (mediaRef.current.requestFullscreen) {\n        mediaRef.current.requestFullscreen();\n      }\n    }\n  };\n\n  const toggleCasting = () => {\n    const newCastingState = !isCasting;\n    setIsCasting(newCastingState);\n  \n    // Generate a session URL when starting to cast\n    if (newCastingState) {\n      const socketId = getSocketId();\n      console.log(\"Starting cast with socket ID:\", socketId);\n      // Use your actual IP address instead of window.location.origin\n      const baseUrl = \"http://192.168.0.161:3000\";\n      const newSessionUrl = `${baseUrl}/player?session=${socketId}`;\n      setSessionUrl(newSessionUrl);\n\n      // If we have a video playing, send an immediate time update\n      if (mediaRef.current && isPlaying) {\n        emitTimeUpdate({\n          currentTime: mediaRef.current.currentTime,\n          timestamp: Date.now(),\n          isSeeking: true\n        });\n      }\n    } else {\n      setSessionUrl(\"\");\n    }\n\n    // Notify player about casting state\n    const castingData = {\n      isCasting: newCastingState,\n      // If starting to cast, send current state\n      ...(newCastingState && {\n        playlist,\n        currentIndex,\n        currentItem: playlist[currentIndex] || null,\n        isPlaying,\n        currentTime: mediaRef.current ? mediaRef.current.currentTime : 0,\n        volume,\n        autoplay,\n      })\n    };\n  \n    console.log(\"Emitting casting state:\", castingData);\n    emitCastingState(castingData);\n  };\n\n  // Handle media ended event\n  const handleMediaEnded = () => {\n    if (autoplay && playlist.length > 0) {\n      handleNext();\n    } else {\n      setIsPlaying(false);\n\n      if (isCasting) {\n        emitPlaybackState({ isPlaying: false });\n      }\n    }\n  };\n\n  // Effect to handle socket events from Player\n  useEffect(() => {\n    console.log(\"Setting up request_state listener\");\n    \n    socket.on(\"request_state\", () => {\n      console.log(\"Received request_state, isCasting:\", isCasting);\n      if (isCasting) {\n        // Send current state to player\n        const stateData = {\n          isCasting: true,\n          playlist,\n          currentIndex,\n          currentItem: playlist[currentIndex] || null,\n          isPlaying,\n          currentTime,\n          volume,\n          autoplay,\n        };\n        console.log(\"Sending state in response:\", stateData);\n        emitCastingState(stateData);\n      }\n    });\n\n    return () => {\n      console.log(\"Cleaning up request_state listener\");\n      socket.off(\"request_state\");\n    };\n  }, [\n    playlist,\n    currentIndex,\n    isPlaying,\n    currentTime,\n    volume,\n    autoplay,\n    isCasting,\n  ]);\n\n  // Effect to sync media playback state when it changes\n  useEffect(() => {\n    if (mediaRef.current) {\n      if (isPlaying) {\n        mediaRef.current\n          .play()\n          .catch((e) => console.error(\"Playback error:\", e));\n      } else {\n        mediaRef.current.pause();\n      }\n    }\n  }, [isPlaying, currentIndex, playlist]);\n\n  // Effect to handle duration change\n  useEffect(() => {\n    const handleDurationChange = () => {\n      if (mediaRef.current) {\n        setDuration(mediaRef.current.duration || 0);\n      }\n    };\n\n    const mediaElement = mediaRef.current;\n    if (mediaElement) {\n      mediaElement.addEventListener(\"durationchange\", handleDurationChange);\n      mediaElement.addEventListener(\"loadedmetadata\", handleDurationChange);\n    }\n\n    return () => {\n      if (mediaElement) {\n        mediaElement.removeEventListener(\n          \"durationchange\",\n          handleDurationChange\n        );\n        mediaElement.removeEventListener(\n          \"loadedmetadata\",\n          handleDurationChange\n        );\n      }\n    };\n  }, [currentIndex, playlist]);\n  \n  // Current media item\n  const currentItem = playlist[currentIndex];\n\n  return (\n    <div className=\"flex flex-col h-screen\">\n      <header className=\"bg-gray-800 p-4 flex justify-between items-center\">\n        <div className=\"flex items-center space-x-4\">\n          <h1 className=\"text-2xl font-bold text-teal-400\">Media Caster</h1>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"flex items-center\">\n            {isCasting && (\n              <div className=\"mr-4 bg-gray-700 px-3 py-1 rounded flex items-center\">\n                <span className=\"text-sm text-gray-300 mr-2\">Session URL:</span>\n                <input\n                  type=\"text\"\n                  value={sessionUrl}\n                  readOnly\n                  className=\"bg-gray-800 text-xs text-gray-300 px-2 py-1 rounded w-48\"\n                  onClick={(e) => e.target.select()}\n                />\n              </div>\n            )}\n            <div className=\"flex items-center space-x-2 mr-4\">\n              <span className=\"text-sm text-gray-300\">Playlist Source:</span>\n              <div className=\"relative inline-flex h-6 w-11 items-center rounded-full bg-gray-700 transition-colors focus:outline-none focus:ring-2 focus:ring-teal-500 focus:ring-offset-2\">\n                <span\n                  className={`${\n                    isDatabasePlaylist ? 'translate-x-6' : 'translate-x-1'\n                  } inline-block h-4 w-4 transform rounded-full bg-white transition-transform`}\n                />\n                <button\n                  onClick={() => setIsDatabasePlaylist(!isDatabasePlaylist)}\n                  className=\"absolute inset-0 w-full h-full rounded-full\"\n                >\n                  <span className=\"sr-only\">Switch playlist source</span>\n                </button>\n              </div>\n              <span className=\"text-sm text-gray-300\">\n                {isDatabasePlaylist ? \"Database\" : \"Local\"}\n              </span>\n            </div>\n            <button\n              onClick={toggleCasting}\n              className={`flex items-center space-x-1 px-3 py-1 rounded ${\n                isCasting\n                  ? \"bg-red-600 hover:bg-red-700\"\n                  : \"bg-teal-600 hover:bg-teal-700\"\n              }`}\n            >\n              {isCasting ? (\n                <>\n                  <Square size={16} />\n                  <span>Stop Casting</span>\n                </>\n              ) : (\n                <>\n                  <Cast size={16} />\n                  <span>Start Casting</span>\n                </>\n              )}\n            </button>\n          </div>\n          <button\n            onClick={() => setShowPlaylist(!showPlaylist)}\n            className=\"p-2 rounded-full hover:bg-gray-700\"\n          >\n            <List size={20} />\n          </button>\n          <button\n            onClick={() => setShowDirectoryModal(true)}\n            className=\"flex items-center space-x-1 bg-teal-600 hover:bg-teal-700 px-3 py-1 rounded\"\n          >\n            <Plus size={16} />\n            <span>{isDatabasePlaylist ? \"Upload to Database\" : \"Add Directory\"}</span>\n          </button>\n        </div>\n      </header>\n\n      <div className=\"flex flex-1 overflow-hidden\">\n        {/* Main content area */}\n        <div\n          className={`flex-1 p-4 flex flex-col ${\n            showPlaylist ? \"w-2/3\" : \"w-full\"\n          }`}\n        >\n          <div className=\"flex-1 bg-gray-800 rounded-lg overflow-hidden flex items-center justify-center\">\n            {currentItem && currentItem.type === \"video\" ? (\n              <video\n                ref={mediaRef}\n                src={currentItem.path}\n                className=\"max-h-full max-w-full\"\n                onTimeUpdate={handleTimeUpdate}\n                onEnded={handleMediaEnded}\n              />\n            ) : currentItem && currentItem.type === \"image\" ? (\n              <img\n                src={currentItem.path}\n                alt={currentItem.name}\n                className=\"max-h-full max-w-full object-contain\"\n              />\n            ) : (\n              <div className=\"text-gray-500\">No media selected</div>\n            )}\n          </div>\n\n          {/* Media controls */}\n          <MediaControls \n            isPlaying={isPlaying}\n            currentTime={currentTime}\n            duration={duration}\n            volume={volume}\n            autoplay={autoplay}\n            handlePrevious={handlePrevious}\n            handleNext={handleNext}\n            togglePlay={togglePlay}\n            handleSeek={handleSeek}\n            handleVolumeChange={handleVolumeChange}\n            toggleAutoplay={toggleAutoplay}\n            handleFullscreen={handleFullscreen}\n          />\n        </div>\n\n        {/* Playlist sidebar */}\n        {showPlaylist && (\n          <PlaylistSidebar \n            directories={directories}\n            playlist={playlist}\n            currentIndex={currentIndex}\n            isPlaying={isPlaying}\n            activeDirectory={activeDirectory}\n            toggleDirectoryView={toggleDirectoryView}\n            removeDirectory={removeDirectory}\n            removeFromPlaylist={removeFromPlaylist}\n            playMedia={playMedia}\n            isDatabasePlaylist={isDatabasePlaylist}\n          />\n        )}\n      </div>\n\n      {/* Directory Selection Modal */}\n      <DirectoryModal\n        isOpen={showDirectoryModal}\n        onClose={() => setShowDirectoryModal(false)}\n        onAddDirectory={addDirectory}\n        isDatabasePlaylist={isDatabasePlaylist}\n      />\n    </div>\n  );\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}