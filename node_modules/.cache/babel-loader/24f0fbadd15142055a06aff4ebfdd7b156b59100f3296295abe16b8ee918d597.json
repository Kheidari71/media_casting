{"ast":null,"code":"var _jsxFileName = \"/Users/developmentsigncast.ca/Desktop/caster-final/src/components/Player/Player.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport socket, { requestState } from \"../../services/socketService\";\n\n// Player component - minimal UI for displaying media\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Player() {\n  _s();\n  const [currentItem, setCurrentItem] = useState(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [volume, setVolume] = useState(1);\n  const [isCasting, setIsCasting] = useState(false);\n  const mediaRef = useRef(null);\n\n  // Effect to handle socket events from Caster\n  useEffect(() => {\n    socket.on(\"casting_state\", data => {\n      setIsCasting(data.isCasting);\n      if (data.isCasting) {\n        // Update all state if casting is active\n        if (data.currentItem) setCurrentItem(data.currentItem);\n        if (data.isPlaying !== undefined) setIsPlaying(data.isPlaying);\n        if (data.currentTime !== undefined) setCurrentTime(data.currentTime);\n        if (data.volume !== undefined) setVolume(data.volume);\n      } else {\n        // Reset state if casting is stopped\n        setCurrentItem(null);\n        setIsPlaying(false);\n        setCurrentTime(0);\n      }\n    });\n    socket.on(\"media_change\", data => {\n      setCurrentItem(data.item);\n      setIsPlaying(data.isPlaying);\n    });\n    socket.on(\"playback_state\", data => {\n      setIsPlaying(data.isPlaying);\n    });\n    socket.on(\"time_update\", data => {\n      setCurrentTime(data.currentTime);\n      if (mediaRef.current) {\n        mediaRef.current.currentTime = data.currentTime;\n      }\n    });\n    socket.on(\"volume_change\", data => {\n      setVolume(data.volume);\n      if (mediaRef.current) {\n        mediaRef.current.volume = data.volume;\n      }\n    });\n\n    // Request current state when connecting\n    requestState();\n    return () => {\n      socket.off(\"casting_state\");\n      socket.off(\"media_change\");\n      socket.off(\"playback_state\");\n      socket.off(\"time_update\");\n      socket.off(\"volume_change\");\n    };\n  }, []);\n\n  // Effect to sync media playback state\n  useEffect(() => {\n    if (mediaRef.current) {\n      if (isPlaying) {\n        mediaRef.current.play().catch(e => console.error(\"Playback error:\", e));\n      } else {\n        mediaRef.current.pause();\n      }\n    }\n  }, [isPlaying, currentItem]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"h-screen w-screen bg-black flex items-center justify-center overflow-hidden\",\n    children: isCasting ? currentItem && currentItem.type === \"video\" ? /*#__PURE__*/_jsxDEV(\"video\", {\n      ref: mediaRef,\n      src: currentItem.path,\n      className: \"max-h-full max-w-full\",\n      playsInline: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }, this) : currentItem && currentItem.type === \"image\" ? /*#__PURE__*/_jsxDEV(\"img\", {\n      src: currentItem.path,\n      alt: currentItem.name,\n      className: \"max-h-full max-w-full object-contain\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-gray-500\",\n      children: \"Waiting for media...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center p-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-4xl text-gray-500 mb-4\",\n        children: \"Waiting for Cast\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-400\",\n        children: \"The caster needs to press \\\"Start Casting\\\" to begin streaming content to this player.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n_s(Player, \"r77sh/0fyddIo/3MHb7dDrJA6Oc=\");\n_c = Player;\nvar _c;\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"names":["React","useState","useEffect","useRef","socket","requestState","jsxDEV","_jsxDEV","Player","_s","currentItem","setCurrentItem","isPlaying","setIsPlaying","currentTime","setCurrentTime","volume","setVolume","isCasting","setIsCasting","mediaRef","on","data","undefined","item","current","off","play","catch","e","console","error","pause","className","children","type","ref","src","path","playsInline","fileName","_jsxFileName","lineNumber","columnNumber","alt","name","_c","$RefreshReg$"],"sources":["/Users/developmentsigncast.ca/Desktop/caster-final/src/components/Player/Player.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport socket, { requestState } from \"../../services/socketService\";\n\n// Player component - minimal UI for displaying media\nexport default function Player() {\n  const [currentItem, setCurrentItem] = useState(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [volume, setVolume] = useState(1);\n  const [isCasting, setIsCasting] = useState(false);\n\n  const mediaRef = useRef(null);\n\n  // Effect to handle socket events from Caster\n  useEffect(() => {\n    socket.on(\"casting_state\", (data) => {\n      setIsCasting(data.isCasting);\n\n      if (data.isCasting) {\n        // Update all state if casting is active\n        if (data.currentItem) setCurrentItem(data.currentItem);\n        if (data.isPlaying !== undefined) setIsPlaying(data.isPlaying);\n        if (data.currentTime !== undefined) setCurrentTime(data.currentTime);\n        if (data.volume !== undefined) setVolume(data.volume);\n      } else {\n        // Reset state if casting is stopped\n        setCurrentItem(null);\n        setIsPlaying(false);\n        setCurrentTime(0);\n      }\n    });\n\n    socket.on(\"media_change\", (data) => {\n      setCurrentItem(data.item);\n      setIsPlaying(data.isPlaying);\n    });\n    \n    socket.on(\"playback_state\", (data) => {\n      setIsPlaying(data.isPlaying);\n    });\n\n    socket.on(\"time_update\", (data) => {\n      setCurrentTime(data.currentTime);\n      if (mediaRef.current) {\n        mediaRef.current.currentTime = data.currentTime;\n      }\n    });\n\n    socket.on(\"volume_change\", (data) => {\n      setVolume(data.volume);\n      if (mediaRef.current) {\n        mediaRef.current.volume = data.volume;\n      }\n    });\n\n    // Request current state when connecting\n    requestState();\n\n    return () => {\n      socket.off(\"casting_state\");\n      socket.off(\"media_change\");\n      socket.off(\"playback_state\");\n      socket.off(\"time_update\");\n      socket.off(\"volume_change\");\n    };\n  }, []);\n\n  // Effect to sync media playback state\n  useEffect(() => {\n    if (mediaRef.current) {\n      if (isPlaying) {\n        mediaRef.current\n          .play()\n          .catch((e) => console.error(\"Playback error:\", e));\n      } else {\n        mediaRef.current.pause();\n      }\n    }\n  }, [isPlaying, currentItem]);\n\n  return (\n    <div className=\"h-screen w-screen bg-black flex items-center justify-center overflow-hidden\">\n      {isCasting ? (\n        currentItem && currentItem.type === \"video\" ? (\n          <video\n            ref={mediaRef}\n            src={currentItem.path}\n            className=\"max-h-full max-w-full\"\n            playsInline\n          />\n        ) : currentItem && currentItem.type === \"image\" ? (\n          <img\n            src={currentItem.path}\n            alt={currentItem.name}\n            className=\"max-h-full max-w-full object-contain\"\n          />\n        ) : (\n          <div className=\"text-gray-500\">Waiting for media...</div>\n        )\n      ) : (\n        <div className=\"text-center p-8\">\n          <div className=\"text-4xl text-gray-500 mb-4\">Waiting for Cast</div>\n          <p className=\"text-gray-400\">\n            The caster needs to press \"Start Casting\" to begin streaming content\n            to this player.\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}