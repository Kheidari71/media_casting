{"ast":null,"code":"// Format time in minutes:seconds\nexport const formatTime = seconds => {\n  if (!seconds && seconds !== 0) return \"0:00\";\n  const mins = Math.floor(seconds / 60);\n  const secs = Math.floor(seconds % 60);\n  return `${mins}:${secs < 10 ? \"0\" : \"\"}${secs}`;\n};\n\n// Format file size with appropriate units\nexport const formatFileSize = bytes => {\n  if (bytes === 0) return \"0 Bytes\";\n  const k = 1024;\n  const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\"];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \" \" + sizes[i];\n};\n\n// Create a media item object from a File object\nexport const createMediaItem = file => {\n  const isVideo = file.type.startsWith(\"video/\");\n  const isImage = file.type.startsWith(\"image/\");\n\n  // Create object URL for the file\n  const fileUrl = URL.createObjectURL(file);\n  return {\n    id: Date.now() + Math.random(),\n    name: file.name,\n    path: fileUrl,\n    type: isVideo ? \"video\" : isImage ? \"image\" : \"unknown\",\n    size: file.size\n  };\n};","map":{"version":3,"names":["formatTime","seconds","mins","Math","floor","secs","formatFileSize","bytes","k","sizes","i","log","parseFloat","pow","toFixed","createMediaItem","file","isVideo","type","startsWith","isImage","fileUrl","URL","createObjectURL","id","Date","now","random","name","path","size"],"sources":["/Users/developmentsigncast.ca/Desktop/caster-final/src/utils/mediaUtils.js"],"sourcesContent":["// Format time in minutes:seconds\nexport const formatTime = (seconds) => {\n    if (!seconds && seconds !== 0) return \"0:00\";\n    \n    const mins = Math.floor(seconds / 60);\n    const secs = Math.floor(seconds % 60);\n    return `${mins}:${secs < 10 ? \"0\" : \"\"}${secs}`;\n  };\n  \n  // Format file size with appropriate units\n  export const formatFileSize = (bytes) => {\n    if (bytes === 0) return \"0 Bytes\";\n    const k = 1024;\n    const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\"];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \" \" + sizes[i];\n  };\n  \n  // Create a media item object from a File object\n  export const createMediaItem = (file) => {\n    const isVideo = file.type.startsWith(\"video/\");\n    const isImage = file.type.startsWith(\"image/\");\n    \n    // Create object URL for the file\n    const fileUrl = URL.createObjectURL(file);\n    \n    return {\n      id: Date.now() + Math.random(),\n      name: file.name,\n      path: fileUrl,\n      type: isVideo ? \"video\" : isImage ? \"image\" : \"unknown\",\n      size: file.size,\n    };\n  };"],"mappings":"AAAA;AACA,OAAO,MAAMA,UAAU,GAAIC,OAAO,IAAK;EACnC,IAAI,CAACA,OAAO,IAAIA,OAAO,KAAK,CAAC,EAAE,OAAO,MAAM;EAE5C,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,GAAG,EAAE,CAAC;EACrC,MAAMI,IAAI,GAAGF,IAAI,CAACC,KAAK,CAACH,OAAO,GAAG,EAAE,CAAC;EACrC,OAAO,GAAGC,IAAI,IAAIG,IAAI,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAGA,IAAI,EAAE;AACjD,CAAC;;AAED;AACA,OAAO,MAAMC,cAAc,GAAIC,KAAK,IAAK;EACvC,IAAIA,KAAK,KAAK,CAAC,EAAE,OAAO,SAAS;EACjC,MAAMC,CAAC,GAAG,IAAI;EACd,MAAMC,KAAK,GAAG,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;EACzC,MAAMC,CAAC,GAAGP,IAAI,CAACC,KAAK,CAACD,IAAI,CAACQ,GAAG,CAACJ,KAAK,CAAC,GAAGJ,IAAI,CAACQ,GAAG,CAACH,CAAC,CAAC,CAAC;EACnD,OAAOI,UAAU,CAAC,CAACL,KAAK,GAAGJ,IAAI,CAACU,GAAG,CAACL,CAAC,EAAEE,CAAC,CAAC,EAAEI,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGL,KAAK,CAACC,CAAC,CAAC;AACzE,CAAC;;AAED;AACA,OAAO,MAAMK,eAAe,GAAIC,IAAI,IAAK;EACvC,MAAMC,OAAO,GAAGD,IAAI,CAACE,IAAI,CAACC,UAAU,CAAC,QAAQ,CAAC;EAC9C,MAAMC,OAAO,GAAGJ,IAAI,CAACE,IAAI,CAACC,UAAU,CAAC,QAAQ,CAAC;;EAE9C;EACA,MAAME,OAAO,GAAGC,GAAG,CAACC,eAAe,CAACP,IAAI,CAAC;EAEzC,OAAO;IACLQ,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGvB,IAAI,CAACwB,MAAM,CAAC,CAAC;IAC9BC,IAAI,EAAEZ,IAAI,CAACY,IAAI;IACfC,IAAI,EAAER,OAAO;IACbH,IAAI,EAAED,OAAO,GAAG,OAAO,GAAGG,OAAO,GAAG,OAAO,GAAG,SAAS;IACvDU,IAAI,EAAEd,IAAI,CAACc;EACb,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}