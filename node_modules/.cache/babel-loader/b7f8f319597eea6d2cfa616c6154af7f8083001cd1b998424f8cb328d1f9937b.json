{"ast":null,"code":"// Format time in minutes:seconds\nexport const formatTime = seconds => {\n  if (!seconds && seconds !== 0) return \"0:00\";\n  const mins = Math.floor(seconds / 60);\n  const secs = Math.floor(seconds % 60);\n  return `${mins}:${secs < 10 ? \"0\" : \"\"}${secs}`;\n};\n\n// Format file size with appropriate units\nexport const formatFileSize = bytes => {\n  if (bytes === 0) return \"0 Bytes\";\n  const k = 1024;\n  const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\"];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \" \" + sizes[i];\n};\n\n// Create a media item object from a File object\nexport const createMediaItem = async file => {\n  const isVideo = file.type.startsWith(\"video/\");\n  const isImage = file.type.startsWith(\"image/\");\n  if (!isVideo && !isImage) {\n    return null; // Skip unsupported files\n  }\n\n  // Upload file to server\n  const formData = new FormData();\n  formData.append('file', file);\n  try {\n    const response = await fetch('http://192.168.0.161:5000/upload', {\n      method: 'POST',\n      body: formData\n    });\n    if (!response.ok) {\n      throw new Error('Upload failed');\n    }\n    const data = await response.json();\n    return {\n      id: Date.now() + Math.random(),\n      name: file.name,\n      path: data.url,\n      // Server URL\n      type: isVideo ? \"video\" : \"image\",\n      size: file.size\n    };\n  } catch (error) {\n    console.error(\"Error uploading file:\", error);\n    return null;\n  }\n};","map":{"version":3,"names":["formatTime","seconds","mins","Math","floor","secs","formatFileSize","bytes","k","sizes","i","log","parseFloat","pow","toFixed","createMediaItem","file","isVideo","type","startsWith","isImage","formData","FormData","append","response","fetch","method","body","ok","Error","data","json","id","Date","now","random","name","path","url","size","error","console"],"sources":["/Users/developmentsigncast.ca/Desktop/caster-final/src/utils/mediaUtils.js"],"sourcesContent":["// Format time in minutes:seconds\nexport const formatTime = (seconds) => {\n    if (!seconds && seconds !== 0) return \"0:00\";\n    \n    const mins = Math.floor(seconds / 60);\n    const secs = Math.floor(seconds % 60);\n    return `${mins}:${secs < 10 ? \"0\" : \"\"}${secs}`;\n  };\n  \n  // Format file size with appropriate units\n  export const formatFileSize = (bytes) => {\n    if (bytes === 0) return \"0 Bytes\";\n    const k = 1024;\n    const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\"];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \" \" + sizes[i];\n  };\n  \n  // Create a media item object from a File object\n  export const createMediaItem = async (file) => {\n    const isVideo = file.type.startsWith(\"video/\");\n    const isImage = file.type.startsWith(\"image/\");\n    \n    if (!isVideo && !isImage) {\n      return null; // Skip unsupported files\n    }\n    \n    // Upload file to server\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    try {\n      const response = await fetch('http://192.168.0.161:5000/upload', {\n        method: 'POST',\n        body: formData,\n      });\n      \n      if (!response.ok) {\n        throw new Error('Upload failed');\n      }\n      \n      const data = await response.json();\n      \n      return {\n        id: Date.now() + Math.random(),\n        name: file.name,\n        path: data.url, // Server URL\n        type: isVideo ? \"video\" : \"image\",\n        size: file.size,\n      };\n    } catch (error) {\n      console.error(\"Error uploading file:\", error);\n      return null;\n    }\n  };"],"mappings":"AAAA;AACA,OAAO,MAAMA,UAAU,GAAIC,OAAO,IAAK;EACnC,IAAI,CAACA,OAAO,IAAIA,OAAO,KAAK,CAAC,EAAE,OAAO,MAAM;EAE5C,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,GAAG,EAAE,CAAC;EACrC,MAAMI,IAAI,GAAGF,IAAI,CAACC,KAAK,CAACH,OAAO,GAAG,EAAE,CAAC;EACrC,OAAO,GAAGC,IAAI,IAAIG,IAAI,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAGA,IAAI,EAAE;AACjD,CAAC;;AAED;AACA,OAAO,MAAMC,cAAc,GAAIC,KAAK,IAAK;EACvC,IAAIA,KAAK,KAAK,CAAC,EAAE,OAAO,SAAS;EACjC,MAAMC,CAAC,GAAG,IAAI;EACd,MAAMC,KAAK,GAAG,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;EACzC,MAAMC,CAAC,GAAGP,IAAI,CAACC,KAAK,CAACD,IAAI,CAACQ,GAAG,CAACJ,KAAK,CAAC,GAAGJ,IAAI,CAACQ,GAAG,CAACH,CAAC,CAAC,CAAC;EACnD,OAAOI,UAAU,CAAC,CAACL,KAAK,GAAGJ,IAAI,CAACU,GAAG,CAACL,CAAC,EAAEE,CAAC,CAAC,EAAEI,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGL,KAAK,CAACC,CAAC,CAAC;AACzE,CAAC;;AAED;AACA,OAAO,MAAMK,eAAe,GAAG,MAAOC,IAAI,IAAK;EAC7C,MAAMC,OAAO,GAAGD,IAAI,CAACE,IAAI,CAACC,UAAU,CAAC,QAAQ,CAAC;EAC9C,MAAMC,OAAO,GAAGJ,IAAI,CAACE,IAAI,CAACC,UAAU,CAAC,QAAQ,CAAC;EAE9C,IAAI,CAACF,OAAO,IAAI,CAACG,OAAO,EAAE;IACxB,OAAO,IAAI,CAAC,CAAC;EACf;;EAEA;EACA,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEP,IAAI,CAAC;EAE7B,IAAI;IACF,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,EAAE;MAC/DC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEN;IACR,CAAC,CAAC;IAEF,IAAI,CAACG,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,eAAe,CAAC;IAClC;IAEA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;IAElC,OAAO;MACLC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG/B,IAAI,CAACgC,MAAM,CAAC,CAAC;MAC9BC,IAAI,EAAEpB,IAAI,CAACoB,IAAI;MACfC,IAAI,EAAEP,IAAI,CAACQ,GAAG;MAAE;MAChBpB,IAAI,EAAED,OAAO,GAAG,OAAO,GAAG,OAAO;MACjCsB,IAAI,EAAEvB,IAAI,CAACuB;IACb,CAAC;EACH,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,OAAO,IAAI;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}