{"ast":null,"code":"var _jsxFileName = \"/Users/developmentsigncast.ca/Desktop/caster-final/src/components/caster/Caster.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { List, Plus, Cast, Square } from \"lucide-react\";\nimport socket, { emitCastingState, emitMediaChange, emitPlaybackState, emitTimeUpdate, emitVolumeChange, emitPlaylistUpdate, getSocketId } from \"../../services/socketService\";\nimport MediaControls from \"./MediaControls\";\nimport PlaylistSidebar from \"./PlaylistSidebar\";\nimport DirectoryModal from \"./DirectoryModal\";\n\n// Caster component - full-featured media player and playlist management\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Caster() {\n  _s();\n  const [playlist, setPlaylist] = useState([]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [volume, setVolume] = useState(1);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [autoplay, setAutoplay] = useState(() => {\n    return localStorage.getItem(\"autoplay\") === \"true\";\n  });\n  const [directories, setDirectories] = useState([]);\n  const [activeDirectory, setActiveDirectory] = useState(null);\n  const [showPlaylist, setShowPlaylist] = useState(true);\n  const [isCasting, setIsCasting] = useState(false);\n  const [showDirectoryModal, setShowDirectoryModal] = useState(false);\n  const [sessionUrl, setSessionUrl] = useState(\"\");\n  const mediaRef = useRef(null);\n\n  // Function to add a directory and its media files\n  const addDirectory = (directoryName, mediaItems) => {\n    if (!directoryName || mediaItems.length === 0) return;\n\n    // Create directory with its media items\n    const directoryId = Date.now();\n    const newDirectory = {\n      id: directoryId,\n      name: directoryName,\n      items: mediaItems.map(item => ({\n        ...item,\n        directoryId\n      }))\n    };\n\n    // Add the directory to the list\n    setDirectories([...directories, newDirectory]);\n\n    // Add the media items to the playlist with directory ID\n    const newPlaylist = [...playlist, ...newDirectory.items];\n    setPlaylist(newPlaylist);\n\n    // Set this as the active directory\n    setActiveDirectory(directoryId);\n\n    // Notify player about playlist update if casting\n    if (isCasting) {\n      emitPlaylistUpdate(newPlaylist);\n    }\n  };\n\n  // Function to remove a directory and its files\n  const removeDirectory = dirId => {\n    // Find the directory to remove\n    const dirToRemove = directories.find(dir => dir.id === dirId);\n    if (!dirToRemove) return;\n\n    // Remove the directory from the list\n    const newDirectories = directories.filter(dir => dir.id !== dirId);\n    setDirectories(newDirectories);\n\n    // Remove all media items that belong to this directory\n    const newPlaylist = playlist.filter(item => item.directoryId !== dirId);\n    setPlaylist(newPlaylist);\n\n    // Update player if casting\n    if (isCasting) {\n      emitPlaylistUpdate(newPlaylist);\n    }\n\n    // If we removed the active directory, set active to null\n    if (activeDirectory === dirId) {\n      setActiveDirectory(null);\n    }\n\n    // If we removed the current playing item's directory, adjust currentIndex\n    if (currentIndex >= newPlaylist.length) {\n      setCurrentIndex(Math.max(0, newPlaylist.length - 1));\n    }\n  };\n\n  // Function to toggle directory view\n  const toggleDirectoryView = dirId => {\n    if (activeDirectory === dirId) {\n      // If clicking the already active directory, close it\n      setActiveDirectory(null);\n    } else {\n      // Otherwise, set this directory as active\n      setActiveDirectory(dirId);\n    }\n  };\n  const removeFromPlaylist = id => {\n    const newPlaylist = playlist.filter(item => item.id !== id);\n    setPlaylist(newPlaylist);\n    if (isCasting) {\n      emitPlaylistUpdate(newPlaylist);\n    }\n\n    // If we removed the current item, adjust currentIndex\n    if (currentIndex >= newPlaylist.length) {\n      setCurrentIndex(Math.max(0, newPlaylist.length - 1));\n    }\n  };\n  const playMedia = index => {\n    setCurrentIndex(index);\n    setIsPlaying(true);\n\n    // Notify player if casting\n    if (isCasting) {\n      emitMediaChange({\n        index,\n        item: playlist[index],\n        isPlaying: true\n      });\n    }\n  };\n  const togglePlay = () => {\n    const newPlayingState = !isPlaying;\n    setIsPlaying(newPlayingState);\n    if (isCasting) {\n      emitPlaybackState({\n        isPlaying: newPlayingState\n      });\n    }\n  };\n  const handleNext = () => {\n    if (playlist.length === 0) return;\n    const nextIndex = (currentIndex + 1) % playlist.length;\n    playMedia(nextIndex);\n  };\n  const handlePrevious = () => {\n    if (playlist.length === 0) return;\n    const prevIndex = (currentIndex - 1 + playlist.length) % playlist.length;\n    playMedia(prevIndex);\n  };\n  const handleVolumeChange = e => {\n    const newVolume = parseFloat(e.target.value);\n    setVolume(newVolume);\n    if (mediaRef.current) {\n      mediaRef.current.volume = newVolume;\n    }\n    if (isCasting) {\n      emitVolumeChange({\n        volume: newVolume\n      });\n    }\n  };\n  const handleTimeUpdate = () => {\n    if (mediaRef.current) {\n      setCurrentTime(mediaRef.current.currentTime);\n      if (isCasting) {\n        emitTimeUpdate({\n          currentTime: mediaRef.current.currentTime\n        });\n      }\n    }\n  };\n  const handleSeek = e => {\n    const newTime = parseFloat(e.target.value);\n    setCurrentTime(newTime);\n    if (mediaRef.current) {\n      mediaRef.current.currentTime = newTime;\n    }\n    if (isCasting) {\n      emitTimeUpdate({\n        currentTime: newTime\n      });\n    }\n  };\n  const toggleAutoplay = () => {\n    const newAutoplay = !autoplay;\n    setAutoplay(newAutoplay);\n    localStorage.setItem(\"autoplay\", newAutoplay.toString());\n  };\n  const handleFullscreen = () => {\n    if (mediaRef.current) {\n      if (mediaRef.current.requestFullscreen) {\n        mediaRef.current.requestFullscreen();\n      }\n    }\n  };\n  const toggleCasting = () => {\n    const newCastingState = !isCasting;\n    setIsCasting(newCastingState);\n\n    // Generate a session URL when starting to cast\n    if (newCastingState) {\n      const socketId = getSocketId();\n      console.log(\"Starting cast with socket ID:\", socketId);\n      const baseUrl = window.location.origin;\n      const newSessionUrl = `${baseUrl}/player?session=${socketId}`;\n      setSessionUrl(newSessionUrl);\n    } else {\n      setSessionUrl(\"\");\n    }\n\n    // Notify player about casting state\n    const castingData = {\n      isCasting: newCastingState,\n      // If starting to cast, send current state\n      ...(newCastingState && {\n        playlist,\n        currentIndex,\n        currentItem: playlist[currentIndex] || null,\n        isPlaying,\n        currentTime,\n        volume,\n        autoplay\n      })\n    };\n    console.log(\"Emitting casting state:\", castingData);\n    emitCastingState(castingData);\n  };\n\n  // Handle media ended event\n  const handleMediaEnded = () => {\n    if (autoplay && playlist.length > 0) {\n      handleNext();\n    } else {\n      setIsPlaying(false);\n      if (isCasting) {\n        emitPlaybackState({\n          isPlaying: false\n        });\n      }\n    }\n  };\n\n  // Effect to handle socket events from Player\n  useEffect(() => {\n    console.log(\"Setting up request_state listener\");\n    socket.on(\"request_state\", () => {\n      console.log(\"Received request_state, isCasting:\", isCasting);\n      if (isCasting) {\n        // Send current state to player\n        const stateData = {\n          isCasting: true,\n          playlist,\n          currentIndex,\n          currentItem: playlist[currentIndex] || null,\n          isPlaying,\n          currentTime,\n          volume,\n          autoplay\n        };\n        console.log(\"Sending state in response:\", stateData);\n        emitCastingState(stateData);\n      }\n    });\n    return () => {\n      console.log(\"Cleaning up request_state listener\");\n      socket.off(\"request_state\");\n    };\n  }, [playlist, currentIndex, isPlaying, currentTime, volume, autoplay, isCasting]);\n\n  // Effect to sync media playback state when it changes\n  useEffect(() => {\n    if (mediaRef.current) {\n      if (isPlaying) {\n        mediaRef.current.play().catch(e => console.error(\"Playback error:\", e));\n      } else {\n        mediaRef.current.pause();\n      }\n    }\n  }, [isPlaying, currentIndex, playlist]);\n\n  // Effect to handle duration change\n  useEffect(() => {\n    const handleDurationChange = () => {\n      if (mediaRef.current) {\n        setDuration(mediaRef.current.duration || 0);\n      }\n    };\n    const mediaElement = mediaRef.current;\n    if (mediaElement) {\n      mediaElement.addEventListener(\"durationchange\", handleDurationChange);\n      mediaElement.addEventListener(\"loadedmetadata\", handleDurationChange);\n    }\n    return () => {\n      if (mediaElement) {\n        mediaElement.removeEventListener(\"durationchange\", handleDurationChange);\n        mediaElement.removeEventListener(\"loadedmetadata\", handleDurationChange);\n      }\n    };\n  }, [currentIndex, playlist]);\n\n  // Current media item\n  const currentItem = playlist[currentIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col h-screen\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"bg-gray-800 p-4 flex justify-between items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center space-x-4\",\n        children: [/*#__PURE__*/_jsxDEV(BackButton, {\n          onBack: () => window.history.back()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-2xl font-bold text-teal-400\",\n          children: \"Media Caster\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center space-x-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center\",\n          children: [isCasting && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mr-4 bg-gray-700 px-3 py-1 rounded flex items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-sm text-gray-300 mr-2\",\n              children: \"Session URL:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 345,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: sessionUrl,\n              readOnly: true,\n              className: \"bg-gray-800 text-xs text-gray-300 px-2 py-1 rounded w-48\",\n              onClick: e => e.target.select()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: toggleCasting,\n            className: `flex items-center space-x-1 px-3 py-1 rounded ${isCasting ? \"bg-red-600 hover:bg-red-700\" : \"bg-teal-600 hover:bg-teal-700\"}`,\n            children: isCasting ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(Square, {\n                size: 16\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 365,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Stop Casting\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 366,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(Cast, {\n                size: 16\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 370,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Start Casting\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 371,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowPlaylist(!showPlaylist),\n          className: \"p-2 rounded-full hover:bg-gray-700\",\n          children: /*#__PURE__*/_jsxDEV(List, {\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 380,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowDirectoryModal(true),\n          className: \"flex items-center space-x-1 bg-teal-600 hover:bg-teal-700 px-3 py-1 rounded\",\n          children: [/*#__PURE__*/_jsxDEV(Plus, {\n            size: 16\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Add Directory\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-1 overflow-hidden\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `flex-1 p-4 flex flex-col ${showPlaylist ? \"w-2/3\" : \"w-full\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex-1 bg-gray-800 rounded-lg overflow-hidden flex items-center justify-center\",\n          children: currentItem && currentItem.type === \"video\" ? /*#__PURE__*/_jsxDEV(\"video\", {\n            ref: mediaRef,\n            src: currentItem.path,\n            className: \"max-h-full max-w-full\",\n            onTimeUpdate: handleTimeUpdate,\n            onEnded: handleMediaEnded\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 15\n          }, this) : currentItem && currentItem.type === \"image\" ? /*#__PURE__*/_jsxDEV(\"img\", {\n            src: currentItem.path,\n            alt: currentItem.name,\n            className: \"max-h-full max-w-full object-contain\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 409,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-gray-500\",\n            children: \"No media selected\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MediaControls, {\n          isPlaying: isPlaying,\n          currentTime: currentTime,\n          duration: duration,\n          volume: volume,\n          autoplay: autoplay,\n          handlePrevious: handlePrevious,\n          handleNext: handleNext,\n          togglePlay: togglePlay,\n          handleSeek: handleSeek,\n          handleVolumeChange: handleVolumeChange,\n          toggleAutoplay: toggleAutoplay,\n          handleFullscreen: handleFullscreen\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 9\n      }, this), showPlaylist && /*#__PURE__*/_jsxDEV(PlaylistSidebar, {\n        directories: directories,\n        playlist: playlist,\n        currentIndex: currentIndex,\n        isPlaying: isPlaying,\n        activeDirectory: activeDirectory,\n        toggleDirectoryView: toggleDirectoryView,\n        removeDirectory: removeDirectory,\n        removeFromPlaylist: removeFromPlaylist,\n        playMedia: playMedia\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DirectoryModal, {\n      isOpen: showDirectoryModal,\n      onClose: () => setShowDirectoryModal(false),\n      onAddDirectory: addDirectory\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 335,\n    columnNumber: 5\n  }, this);\n}\n_s(Caster, \"0lc+oNrnx+Zd+yjHtwIYHMxEe4c=\");\n_c = Caster;\nvar _c;\n$RefreshReg$(_c, \"Caster\");","map":{"version":3,"names":["React","useState","useEffect","useRef","List","Plus","Cast","Square","socket","emitCastingState","emitMediaChange","emitPlaybackState","emitTimeUpdate","emitVolumeChange","emitPlaylistUpdate","getSocketId","MediaControls","PlaylistSidebar","DirectoryModal","jsxDEV","_jsxDEV","Fragment","_Fragment","Caster","_s","playlist","setPlaylist","currentIndex","setCurrentIndex","isPlaying","setIsPlaying","volume","setVolume","currentTime","setCurrentTime","duration","setDuration","autoplay","setAutoplay","localStorage","getItem","directories","setDirectories","activeDirectory","setActiveDirectory","showPlaylist","setShowPlaylist","isCasting","setIsCasting","showDirectoryModal","setShowDirectoryModal","sessionUrl","setSessionUrl","mediaRef","addDirectory","directoryName","mediaItems","length","directoryId","Date","now","newDirectory","id","name","items","map","item","newPlaylist","removeDirectory","dirId","dirToRemove","find","dir","newDirectories","filter","Math","max","toggleDirectoryView","removeFromPlaylist","playMedia","index","togglePlay","newPlayingState","handleNext","nextIndex","handlePrevious","prevIndex","handleVolumeChange","e","newVolume","parseFloat","target","value","current","handleTimeUpdate","handleSeek","newTime","toggleAutoplay","newAutoplay","setItem","toString","handleFullscreen","requestFullscreen","toggleCasting","newCastingState","socketId","console","log","baseUrl","window","location","origin","newSessionUrl","castingData","currentItem","handleMediaEnded","on","stateData","off","play","catch","error","pause","handleDurationChange","mediaElement","addEventListener","removeEventListener","className","children","BackButton","onBack","history","back","fileName","_jsxFileName","lineNumber","columnNumber","type","readOnly","onClick","select","size","ref","src","path","onTimeUpdate","onEnded","alt","isOpen","onClose","onAddDirectory","_c","$RefreshReg$"],"sources":["/Users/developmentsigncast.ca/Desktop/caster-final/src/components/caster/Caster.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { List, Plus, Cast, Square } from \"lucide-react\";\n\n\nimport socket, {\n  emitCastingState,\n  emitMediaChange,\n  emitPlaybackState,\n  emitTimeUpdate,\n  emitVolumeChange,\n  emitPlaylistUpdate,\n  getSocketId\n} from \"../../services/socketService\";\nimport MediaControls from \"./MediaControls\";\nimport PlaylistSidebar from \"./PlaylistSidebar\";\nimport DirectoryModal from \"./DirectoryModal\";\n\n// Caster component - full-featured media player and playlist management\nexport default function Caster() {\n  const [playlist, setPlaylist] = useState([]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [volume, setVolume] = useState(1);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [autoplay, setAutoplay] = useState(() => {\n    return localStorage.getItem(\"autoplay\") === \"true\";\n  });\n  const [directories, setDirectories] = useState([]);\n  const [activeDirectory, setActiveDirectory] = useState(null);\n  const [showPlaylist, setShowPlaylist] = useState(true);\n  const [isCasting, setIsCasting] = useState(false);\n  const [showDirectoryModal, setShowDirectoryModal] = useState(false);\n  const [sessionUrl, setSessionUrl] = useState(\"\");\n\n  const mediaRef = useRef(null);\n\n  // Function to add a directory and its media files\n  const addDirectory = (directoryName, mediaItems) => {\n    if (!directoryName || mediaItems.length === 0) return;\n\n    // Create directory with its media items\n    const directoryId = Date.now();\n    const newDirectory = { \n      id: directoryId, \n      name: directoryName,\n      items: mediaItems.map(item => ({ ...item, directoryId }))\n    };\n    \n    // Add the directory to the list\n    setDirectories([...directories, newDirectory]);\n\n    // Add the media items to the playlist with directory ID\n    const newPlaylist = [...playlist, ...newDirectory.items];\n    setPlaylist(newPlaylist);\n\n    // Set this as the active directory\n    setActiveDirectory(directoryId);\n\n    // Notify player about playlist update if casting\n    if (isCasting) {\n      emitPlaylistUpdate(newPlaylist);\n    }\n  };\n\n  // Function to remove a directory and its files\n  const removeDirectory = (dirId) => {\n    // Find the directory to remove\n    const dirToRemove = directories.find((dir) => dir.id === dirId);\n    if (!dirToRemove) return;\n\n    // Remove the directory from the list\n    const newDirectories = directories.filter((dir) => dir.id !== dirId);\n    setDirectories(newDirectories);\n\n    // Remove all media items that belong to this directory\n    const newPlaylist = playlist.filter((item) => item.directoryId !== dirId);\n    setPlaylist(newPlaylist);\n\n    // Update player if casting\n    if (isCasting) {\n      emitPlaylistUpdate(newPlaylist);\n    }\n\n    // If we removed the active directory, set active to null\n    if (activeDirectory === dirId) {\n      setActiveDirectory(null);\n    }\n\n    // If we removed the current playing item's directory, adjust currentIndex\n    if (currentIndex >= newPlaylist.length) {\n      setCurrentIndex(Math.max(0, newPlaylist.length - 1));\n    }\n  };\n\n  // Function to toggle directory view\n  const toggleDirectoryView = (dirId) => {\n    if (activeDirectory === dirId) {\n      // If clicking the already active directory, close it\n      setActiveDirectory(null);\n    } else {\n      // Otherwise, set this directory as active\n      setActiveDirectory(dirId);\n    }\n  };\n\n  const removeFromPlaylist = (id) => {\n    const newPlaylist = playlist.filter((item) => item.id !== id);\n    setPlaylist(newPlaylist);\n\n    if (isCasting) {\n      emitPlaylistUpdate(newPlaylist);\n    }\n\n    // If we removed the current item, adjust currentIndex\n    if (currentIndex >= newPlaylist.length) {\n      setCurrentIndex(Math.max(0, newPlaylist.length - 1));\n    }\n  };\n\n  const playMedia = (index) => {\n    setCurrentIndex(index);\n    setIsPlaying(true);\n\n    // Notify player if casting\n    if (isCasting) {\n      emitMediaChange({\n        index,\n        item: playlist[index],\n        isPlaying: true,\n      });\n    }\n  };\n\n  const togglePlay = () => {\n    const newPlayingState = !isPlaying;\n    setIsPlaying(newPlayingState);\n\n    if (isCasting) {\n      emitPlaybackState({ isPlaying: newPlayingState });\n    }\n  };\n\n  const handleNext = () => {\n    if (playlist.length === 0) return;\n    const nextIndex = (currentIndex + 1) % playlist.length;\n    playMedia(nextIndex);\n  };\n\n  const handlePrevious = () => {\n    if (playlist.length === 0) return;\n    const prevIndex = (currentIndex - 1 + playlist.length) % playlist.length;\n    playMedia(prevIndex);\n  };\n\n  const handleVolumeChange = (e) => {\n    const newVolume = parseFloat(e.target.value);\n    setVolume(newVolume);\n    if (mediaRef.current) {\n      mediaRef.current.volume = newVolume;\n    }\n\n    if (isCasting) {\n      emitVolumeChange({ volume: newVolume });\n    }\n  };\n\n  const handleTimeUpdate = () => {\n    if (mediaRef.current) {\n      setCurrentTime(mediaRef.current.currentTime);\n\n      if (isCasting) {\n        emitTimeUpdate({\n          currentTime: mediaRef.current.currentTime,\n        });\n      }\n    }\n  };\n\n  const handleSeek = (e) => {\n    const newTime = parseFloat(e.target.value);\n    setCurrentTime(newTime);\n    if (mediaRef.current) {\n      mediaRef.current.currentTime = newTime;\n    }\n\n    if (isCasting) {\n      emitTimeUpdate({ currentTime: newTime });\n    }\n  };\n\n  const toggleAutoplay = () => {\n    const newAutoplay = !autoplay;\n    setAutoplay(newAutoplay);\n    localStorage.setItem(\"autoplay\", newAutoplay.toString());\n  };\n\n  const handleFullscreen = () => {\n    if (mediaRef.current) {\n      if (mediaRef.current.requestFullscreen) {\n        mediaRef.current.requestFullscreen();\n      }\n    }\n  };\n\n  const toggleCasting = () => {\n    const newCastingState = !isCasting;\n    setIsCasting(newCastingState);\n\n    // Generate a session URL when starting to cast\n    if (newCastingState) {\n      const socketId = getSocketId();\n      console.log(\"Starting cast with socket ID:\", socketId);\n      const baseUrl = window.location.origin;\n      const newSessionUrl = `${baseUrl}/player?session=${socketId}`;\n      setSessionUrl(newSessionUrl);\n    } else {\n      setSessionUrl(\"\");\n    }\n\n    // Notify player about casting state\n    const castingData = {\n      isCasting: newCastingState,\n      // If starting to cast, send current state\n      ...(newCastingState && {\n        playlist,\n        currentIndex,\n        currentItem: playlist[currentIndex] || null,\n        isPlaying,\n        currentTime,\n        volume,\n        autoplay,\n      })\n    };\n  \n    console.log(\"Emitting casting state:\", castingData);\n    emitCastingState(castingData);\n  };\n\n  // Handle media ended event\n  const handleMediaEnded = () => {\n    if (autoplay && playlist.length > 0) {\n      handleNext();\n    } else {\n      setIsPlaying(false);\n\n      if (isCasting) {\n        emitPlaybackState({ isPlaying: false });\n      }\n    }\n  };\n\n  // Effect to handle socket events from Player\n  useEffect(() => {\n    console.log(\"Setting up request_state listener\");\n    \n    socket.on(\"request_state\", () => {\n      console.log(\"Received request_state, isCasting:\", isCasting);\n      if (isCasting) {\n        // Send current state to player\n        const stateData = {\n          isCasting: true,\n          playlist,\n          currentIndex,\n          currentItem: playlist[currentIndex] || null,\n          isPlaying,\n          currentTime,\n          volume,\n          autoplay,\n        };\n        console.log(\"Sending state in response:\", stateData);\n        emitCastingState(stateData);\n      }\n    });\n\n    return () => {\n      console.log(\"Cleaning up request_state listener\");\n      socket.off(\"request_state\");\n    };\n  }, [\n    playlist,\n    currentIndex,\n    isPlaying,\n    currentTime,\n    volume,\n    autoplay,\n    isCasting,\n  ]);\n\n  // Effect to sync media playback state when it changes\n  useEffect(() => {\n    if (mediaRef.current) {\n      if (isPlaying) {\n        mediaRef.current\n          .play()\n          .catch((e) => console.error(\"Playback error:\", e));\n      } else {\n        mediaRef.current.pause();\n      }\n    }\n  }, [isPlaying, currentIndex, playlist]);\n\n  // Effect to handle duration change\n  useEffect(() => {\n    const handleDurationChange = () => {\n      if (mediaRef.current) {\n        setDuration(mediaRef.current.duration || 0);\n      }\n    };\n\n    const mediaElement = mediaRef.current;\n    if (mediaElement) {\n      mediaElement.addEventListener(\"durationchange\", handleDurationChange);\n      mediaElement.addEventListener(\"loadedmetadata\", handleDurationChange);\n    }\n\n    return () => {\n      if (mediaElement) {\n        mediaElement.removeEventListener(\n          \"durationchange\",\n          handleDurationChange\n        );\n        mediaElement.removeEventListener(\n          \"loadedmetadata\",\n          handleDurationChange\n        );\n      }\n    };\n  }, [currentIndex, playlist]);\n  \n  // Current media item\n  const currentItem = playlist[currentIndex];\n\n  return (\n    <div className=\"flex flex-col h-screen\">\n      <header className=\"bg-gray-800 p-4 flex justify-between items-center\">\n        <div className=\"flex items-center space-x-4\">\n          <BackButton onBack={() => window.history.back()} />\n          <h1 className=\"text-2xl font-bold text-teal-400\">Media Caster</h1>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"flex items-center\">\n            {isCasting && (\n              <div className=\"mr-4 bg-gray-700 px-3 py-1 rounded flex items-center\">\n                <span className=\"text-sm text-gray-300 mr-2\">Session URL:</span>\n                <input\n                  type=\"text\"\n                  value={sessionUrl}\n                  readOnly\n                  className=\"bg-gray-800 text-xs text-gray-300 px-2 py-1 rounded w-48\"\n                  onClick={(e) => e.target.select()}\n                />\n              </div>\n            )}\n            <button\n              onClick={toggleCasting}\n              className={`flex items-center space-x-1 px-3 py-1 rounded ${\n                isCasting\n                  ? \"bg-red-600 hover:bg-red-700\"\n                  : \"bg-teal-600 hover:bg-teal-700\"\n              }`}\n            >\n              {isCasting ? (\n                <>\n                  <Square size={16} />\n                  <span>Stop Casting</span>\n                </>\n              ) : (\n                <>\n                  <Cast size={16} />\n                  <span>Start Casting</span>\n                </>\n              )}\n            </button>\n          </div>\n          <button\n            onClick={() => setShowPlaylist(!showPlaylist)}\n            className=\"p-2 rounded-full hover:bg-gray-700\"\n          >\n            <List size={20} />\n          </button>\n          <button\n            onClick={() => setShowDirectoryModal(true)}\n            className=\"flex items-center space-x-1 bg-teal-600 hover:bg-teal-700 px-3 py-1 rounded\"\n          >\n            <Plus size={16} />\n            <span>Add Directory</span>\n          </button>\n        </div>\n      </header>\n\n      <div className=\"flex flex-1 overflow-hidden\">\n        {/* Main content area */}\n        <div\n          className={`flex-1 p-4 flex flex-col ${\n            showPlaylist ? \"w-2/3\" : \"w-full\"\n          }`}\n        >\n          <div className=\"flex-1 bg-gray-800 rounded-lg overflow-hidden flex items-center justify-center\">\n            {currentItem && currentItem.type === \"video\" ? (\n              <video\n                ref={mediaRef}\n                src={currentItem.path}\n                className=\"max-h-full max-w-full\"\n                onTimeUpdate={handleTimeUpdate}\n                onEnded={handleMediaEnded}\n              />\n            ) : currentItem && currentItem.type === \"image\" ? (\n              <img\n                src={currentItem.path}\n                alt={currentItem.name}\n                className=\"max-h-full max-w-full object-contain\"\n              />\n            ) : (\n              <div className=\"text-gray-500\">No media selected</div>\n            )}\n          </div>\n\n          {/* Media controls */}\n          <MediaControls \n            isPlaying={isPlaying}\n            currentTime={currentTime}\n            duration={duration}\n            volume={volume}\n            autoplay={autoplay}\n            handlePrevious={handlePrevious}\n            handleNext={handleNext}\n            togglePlay={togglePlay}\n            handleSeek={handleSeek}\n            handleVolumeChange={handleVolumeChange}\n            toggleAutoplay={toggleAutoplay}\n            handleFullscreen={handleFullscreen}\n          />\n        </div>\n\n        {/* Playlist sidebar */}\n        {showPlaylist && (\n          <PlaylistSidebar \n            directories={directories}\n            playlist={playlist}\n            currentIndex={currentIndex}\n            isPlaying={isPlaying}\n            activeDirectory={activeDirectory}\n            toggleDirectoryView={toggleDirectoryView}\n            removeDirectory={removeDirectory}\n            removeFromPlaylist={removeFromPlaylist}\n            playMedia={playMedia}\n          />\n        )}\n      </div>\n\n      {/* Directory Selection Modal */}\n      <DirectoryModal\n        isOpen={showDirectoryModal}\n        onClose={() => setShowDirectoryModal(false)}\n        onAddDirectory={addDirectory}\n      />\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}