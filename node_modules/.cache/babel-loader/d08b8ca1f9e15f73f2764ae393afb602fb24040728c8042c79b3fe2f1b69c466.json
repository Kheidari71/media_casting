{"ast":null,"code":"var _jsxFileName = \"/Users/developmentsigncast.ca/Desktop/caster-final/src/components/caster/Caster.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { List, Plus, Cast, Square } from \"lucide-react\";\nimport socket, { emitCastingState, emitMediaChange, emitPlaybackState, emitTimeUpdate, emitVolumeChange, emitPlaylistUpdate } from \"../../services/socketService\";\nimport MediaControls from \"./MediaControls\";\nimport PlaylistSidebar from \"./PlaylistSidebar\";\nimport DirectoryModal from \"./DirectoryModal\";\n\n// Caster component - full-featured media player and playlist management\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Caster() {\n  _s();\n  const [playlist, setPlaylist] = useState([]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [volume, setVolume] = useState(1);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [autoplay, setAutoplay] = useState(() => {\n    return localStorage.getItem(\"autoplay\") === \"true\";\n  });\n  const [directories, setDirectories] = useState([]);\n  const [showPlaylist, setShowPlaylist] = useState(true);\n  const [isCasting, setIsCasting] = useState(false);\n  const [showDirectoryModal, setShowDirectoryModal] = useState(false);\n  const mediaRef = useRef(null);\n\n  // Function to add a directory and its media files\n  const addDirectory = (directoryName, mediaItems) => {\n    if (!directoryName || mediaItems.length === 0) return;\n\n    // Add the directory to the list\n    const newDirectory = {\n      name: directoryName,\n      id: Date.now()\n    };\n    setDirectories([...directories, newDirectory]);\n\n    // Add the media items to the playlist\n    const newPlaylist = [...playlist, ...mediaItems];\n    setPlaylist(newPlaylist);\n\n    // Notify player about playlist update if casting\n    if (isCasting) {\n      emitPlaylistUpdate(newPlaylist);\n    }\n  };\n\n  // Function to remove a directory and its files\n  const removeDirectory = dirId => {\n    // Find the directory to remove\n    const dirToRemove = directories.find(dir => dir.id === dirId);\n    if (!dirToRemove) return;\n\n    // Remove the directory from the list\n    const newDirectories = directories.filter(dir => dir.id !== dirId);\n    setDirectories(newDirectories);\n\n    // In a real app, you would know which files belong to which directory\n    // For this demo, we'll just keep the playlist as is\n    // In a real implementation, you would filter out files from the removed directory\n  };\n  const removeFromPlaylist = id => {\n    const newPlaylist = playlist.filter(item => item.id !== id);\n    setPlaylist(newPlaylist);\n    if (isCasting) {\n      emitPlaylistUpdate(newPlaylist);\n    }\n\n    // If we removed the current item, adjust currentIndex\n    if (currentIndex >= newPlaylist.length) {\n      setCurrentIndex(Math.max(0, newPlaylist.length - 1));\n    }\n  };\n  const playMedia = index => {\n    setCurrentIndex(index);\n    setIsPlaying(true);\n\n    // Notify player if casting\n    if (isCasting) {\n      emitMediaChange({\n        index,\n        item: playlist[index],\n        isPlaying: true\n      });\n    }\n  };\n  const togglePlay = () => {\n    const newPlayingState = !isPlaying;\n    setIsPlaying(newPlayingState);\n    if (isCasting) {\n      emitPlaybackState({\n        isPlaying: newPlayingState\n      });\n    }\n  };\n  const handleNext = () => {\n    if (playlist.length === 0) return;\n    const nextIndex = (currentIndex + 1) % playlist.length;\n    playMedia(nextIndex);\n  };\n  const handlePrevious = () => {\n    if (playlist.length === 0) return;\n    const prevIndex = (currentIndex - 1 + playlist.length) % playlist.length;\n    playMedia(prevIndex);\n  };\n  const handleVolumeChange = e => {\n    const newVolume = parseFloat(e.target.value);\n    setVolume(newVolume);\n    if (mediaRef.current) {\n      mediaRef.current.volume = newVolume;\n    }\n    if (isCasting) {\n      emitVolumeChange({\n        volume: newVolume\n      });\n    }\n  };\n  const handleTimeUpdate = () => {\n    if (mediaRef.current) {\n      setCurrentTime(mediaRef.current.currentTime);\n      if (isCasting) {\n        emitTimeUpdate({\n          currentTime: mediaRef.current.currentTime\n        });\n      }\n    }\n  };\n  const handleSeek = e => {\n    const newTime = parseFloat(e.target.value);\n    setCurrentTime(newTime);\n    if (mediaRef.current) {\n      mediaRef.current.currentTime = newTime;\n    }\n    if (isCasting) {\n      emitTimeUpdate({\n        currentTime: newTime\n      });\n    }\n  };\n  const toggleAutoplay = () => {\n    const newAutoplay = !autoplay;\n    setAutoplay(newAutoplay);\n    localStorage.setItem(\"autoplay\", newAutoplay.toString());\n  };\n  const handleFullscreen = () => {\n    if (mediaRef.current) {\n      if (mediaRef.current.requestFullscreen) {\n        mediaRef.current.requestFullscreen();\n      }\n    }\n  };\n  const toggleCasting = () => {\n    const newCastingState = !isCasting;\n    setIsCasting(newCastingState);\n\n    // Notify player about casting state\n    emitCastingState({\n      isCasting: newCastingState,\n      // If starting to cast, send current state\n      ...(newCastingState && {\n        playlist,\n        currentIndex,\n        currentItem: playlist[currentIndex] || null,\n        isPlaying,\n        currentTime,\n        volume,\n        autoplay\n      })\n    });\n  };\n\n  // Handle media ended event\n  const handleMediaEnded = () => {\n    if (autoplay && playlist.length > 0) {\n      handleNext();\n    } else {\n      setIsPlaying(false);\n      if (isCasting) {\n        emitPlaybackState({\n          isPlaying: false\n        });\n      }\n    }\n  };\n\n  // Effect to handle socket events from Player\n  useEffect(() => {\n    socket.on(\"request_state\", () => {\n      if (isCasting) {\n        // Send current state to player\n        emitCastingState({\n          isCasting: true,\n          playlist,\n          currentIndex,\n          currentItem: playlist[currentIndex] || null,\n          isPlaying,\n          currentTime,\n          volume,\n          autoplay\n        });\n      }\n    });\n    return () => {\n      socket.off(\"request_state\");\n    };\n  }, [playlist, currentIndex, isPlaying, currentTime, volume, autoplay, isCasting]);\n\n  // Effect to sync media playback state when it changes\n  useEffect(() => {\n    if (mediaRef.current) {\n      if (isPlaying) {\n        mediaRef.current.play().catch(e => console.error(\"Playback error:\", e));\n      } else {\n        mediaRef.current.pause();\n      }\n    }\n  }, [isPlaying, currentIndex, playlist]);\n\n  // Effect to handle duration change\n  useEffect(() => {\n    const handleDurationChange = () => {\n      if (mediaRef.current) {\n        setDuration(mediaRef.current.duration || 0);\n      }\n    };\n    const mediaElement = mediaRef.current;\n    if (mediaElement) {\n      mediaElement.addEventListener(\"durationchange\", handleDurationChange);\n      mediaElement.addEventListener(\"loadedmetadata\", handleDurationChange);\n    }\n    return () => {\n      if (mediaElement) {\n        mediaElement.removeEventListener(\"durationchange\", handleDurationChange);\n        mediaElement.removeEventListener(\"loadedmetadata\", handleDurationChange);\n      }\n    };\n  }, [currentIndex, playlist]);\n\n  // Current media item\n  const currentItem = playlist[currentIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col h-screen\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"bg-gray-800 p-4 flex justify-between items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-2xl font-bold text-teal-400\",\n        children: \"Media Caster\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center space-x-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: toggleCasting,\n          className: `flex items-center space-x-1 px-3 py-1 rounded ${isCasting ? \"bg-red-600 hover:bg-red-700\" : \"bg-teal-600 hover:bg-teal-700\"}`,\n          children: isCasting ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Square, {\n              size: 16\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Stop Casting\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Cast, {\n              size: 16\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Start Casting\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowDirectoryModal(true),\n          className: \"flex items-center space-x-1 bg-teal-600 hover:bg-teal-700 px-3 py-1 rounded\",\n          children: [/*#__PURE__*/_jsxDEV(Plus, {\n            size: 16\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Add Directory\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-1 overflow-hidden\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `flex-1 p-4 flex flex-col ${showPlaylist ? \"w-2/3\" : \"w-full\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex-1 bg-gray-800 rounded-lg overflow-hidden flex items-center justify-center\",\n          children: currentItem && currentItem.type === \"video\" ? /*#__PURE__*/_jsxDEV(\"video\", {\n            ref: mediaRef,\n            src: currentItem.path,\n            className: \"max-h-full max-w-full\",\n            onTimeUpdate: handleTimeUpdate,\n            onEnded: handleMediaEnded\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 15\n          }, this) : currentItem && currentItem.type === \"image\" ? /*#__PURE__*/_jsxDEV(\"img\", {\n            src: currentItem.path,\n            alt: currentItem.name,\n            className: \"max-h-full max-w-full object-contain\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-gray-500\",\n            children: \"No media selected\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MediaControls, {\n          isPlaying: isPlaying,\n          currentTime: currentTime,\n          duration: duration,\n          volume: volume,\n          autoplay: autoplay,\n          handlePrevious: handlePrevious,\n          handleNext: handleNext,\n          togglePlay: togglePlay,\n          handleSeek: handleSeek,\n          handleVolumeChange: handleVolumeChange,\n          toggleAutoplay: toggleAutoplay,\n          handleFullscreen: handleFullscreen\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 9\n      }, this), showPlaylist && /*#__PURE__*/_jsxDEV(PlaylistSidebar, {\n        directories: directories,\n        playlist: playlist,\n        currentIndex: currentIndex,\n        isPlaying: isPlaying,\n        removeDirectory: removeDirectory,\n        removeFromPlaylist: removeFromPlaylist,\n        playMedia: playMedia\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DirectoryModal, {\n      isOpen: showDirectoryModal,\n      onClose: () => setShowDirectoryModal(false),\n      onAddDirectory: addDirectory\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 274,\n    columnNumber: 5\n  }, this);\n}\n_s(Caster, \"qhRTYg6KjpQfEJ4fmSXAkatEF0A=\");\n_c = Caster;\nvar _c;\n$RefreshReg$(_c, \"Caster\");","map":{"version":3,"names":["React","useState","useEffect","useRef","List","Plus","Cast","Square","socket","emitCastingState","emitMediaChange","emitPlaybackState","emitTimeUpdate","emitVolumeChange","emitPlaylistUpdate","MediaControls","PlaylistSidebar","DirectoryModal","jsxDEV","_jsxDEV","Fragment","_Fragment","Caster","_s","playlist","setPlaylist","currentIndex","setCurrentIndex","isPlaying","setIsPlaying","volume","setVolume","currentTime","setCurrentTime","duration","setDuration","autoplay","setAutoplay","localStorage","getItem","directories","setDirectories","showPlaylist","setShowPlaylist","isCasting","setIsCasting","showDirectoryModal","setShowDirectoryModal","mediaRef","addDirectory","directoryName","mediaItems","length","newDirectory","name","id","Date","now","newPlaylist","removeDirectory","dirId","dirToRemove","find","dir","newDirectories","filter","removeFromPlaylist","item","Math","max","playMedia","index","togglePlay","newPlayingState","handleNext","nextIndex","handlePrevious","prevIndex","handleVolumeChange","e","newVolume","parseFloat","target","value","current","handleTimeUpdate","handleSeek","newTime","toggleAutoplay","newAutoplay","setItem","toString","handleFullscreen","requestFullscreen","toggleCasting","newCastingState","currentItem","handleMediaEnded","on","off","play","catch","console","error","pause","handleDurationChange","mediaElement","addEventListener","removeEventListener","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","size","type","ref","src","path","onTimeUpdate","onEnded","alt","isOpen","onClose","onAddDirectory","_c","$RefreshReg$"],"sources":["/Users/developmentsigncast.ca/Desktop/caster-final/src/components/caster/Caster.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { List, Plus, Cast, Square } from \"lucide-react\";\nimport socket, {\n  emitCastingState,\n  emitMediaChange,\n  emitPlaybackState,\n  emitTimeUpdate,\n  emitVolumeChange,\n  emitPlaylistUpdate\n} from \"../../services/socketService\";\nimport MediaControls from \"./MediaControls\";\nimport PlaylistSidebar from \"./PlaylistSidebar\";\nimport DirectoryModal from \"./DirectoryModal\";\n\n// Caster component - full-featured media player and playlist management\nexport default function Caster() {\n  const [playlist, setPlaylist] = useState([]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [volume, setVolume] = useState(1);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [autoplay, setAutoplay] = useState(() => {\n    return localStorage.getItem(\"autoplay\") === \"true\";\n  });\n  const [directories, setDirectories] = useState([]);\n  const [showPlaylist, setShowPlaylist] = useState(true);\n  const [isCasting, setIsCasting] = useState(false);\n  const [showDirectoryModal, setShowDirectoryModal] = useState(false);\n\n  const mediaRef = useRef(null);\n\n  // Function to add a directory and its media files\n  const addDirectory = (directoryName, mediaItems) => {\n    if (!directoryName || mediaItems.length === 0) return;\n\n    // Add the directory to the list\n    const newDirectory = { name: directoryName, id: Date.now() };\n    setDirectories([...directories, newDirectory]);\n\n    // Add the media items to the playlist\n    const newPlaylist = [...playlist, ...mediaItems];\n    setPlaylist(newPlaylist);\n\n    // Notify player about playlist update if casting\n    if (isCasting) {\n      emitPlaylistUpdate(newPlaylist);\n    }\n  };\n\n  // Function to remove a directory and its files\n  const removeDirectory = (dirId) => {\n    // Find the directory to remove\n    const dirToRemove = directories.find((dir) => dir.id === dirId);\n    if (!dirToRemove) return;\n\n    // Remove the directory from the list\n    const newDirectories = directories.filter((dir) => dir.id !== dirId);\n    setDirectories(newDirectories);\n\n    // In a real app, you would know which files belong to which directory\n    // For this demo, we'll just keep the playlist as is\n    // In a real implementation, you would filter out files from the removed directory\n  };\n\n  const removeFromPlaylist = (id) => {\n    const newPlaylist = playlist.filter((item) => item.id !== id);\n    setPlaylist(newPlaylist);\n\n    if (isCasting) {\n      emitPlaylistUpdate(newPlaylist);\n    }\n\n    // If we removed the current item, adjust currentIndex\n    if (currentIndex >= newPlaylist.length) {\n      setCurrentIndex(Math.max(0, newPlaylist.length - 1));\n    }\n  };\n\n  const playMedia = (index) => {\n    setCurrentIndex(index);\n    setIsPlaying(true);\n\n    // Notify player if casting\n    if (isCasting) {\n      emitMediaChange({\n        index,\n        item: playlist[index],\n        isPlaying: true,\n      });\n    }\n  };\n\n  const togglePlay = () => {\n    const newPlayingState = !isPlaying;\n    setIsPlaying(newPlayingState);\n\n    if (isCasting) {\n      emitPlaybackState({ isPlaying: newPlayingState });\n    }\n  };\n\n  const handleNext = () => {\n    if (playlist.length === 0) return;\n    const nextIndex = (currentIndex + 1) % playlist.length;\n    playMedia(nextIndex);\n  };\n\n  const handlePrevious = () => {\n    if (playlist.length === 0) return;\n    const prevIndex = (currentIndex - 1 + playlist.length) % playlist.length;\n    playMedia(prevIndex);\n  };\n\n  const handleVolumeChange = (e) => {\n    const newVolume = parseFloat(e.target.value);\n    setVolume(newVolume);\n    if (mediaRef.current) {\n      mediaRef.current.volume = newVolume;\n    }\n\n    if (isCasting) {\n      emitVolumeChange({ volume: newVolume });\n    }\n  };\n\n  const handleTimeUpdate = () => {\n    if (mediaRef.current) {\n      setCurrentTime(mediaRef.current.currentTime);\n\n      if (isCasting) {\n        emitTimeUpdate({\n          currentTime: mediaRef.current.currentTime,\n        });\n      }\n    }\n  };\n\n  const handleSeek = (e) => {\n    const newTime = parseFloat(e.target.value);\n    setCurrentTime(newTime);\n    if (mediaRef.current) {\n      mediaRef.current.currentTime = newTime;\n    }\n\n    if (isCasting) {\n      emitTimeUpdate({ currentTime: newTime });\n    }\n  };\n\n  const toggleAutoplay = () => {\n    const newAutoplay = !autoplay;\n    setAutoplay(newAutoplay);\n    localStorage.setItem(\"autoplay\", newAutoplay.toString());\n  };\n\n  const handleFullscreen = () => {\n    if (mediaRef.current) {\n      if (mediaRef.current.requestFullscreen) {\n        mediaRef.current.requestFullscreen();\n      }\n    }\n  };\n\n  const toggleCasting = () => {\n    const newCastingState = !isCasting;\n    setIsCasting(newCastingState);\n\n    // Notify player about casting state\n    emitCastingState({\n      isCasting: newCastingState,\n      // If starting to cast, send current state\n      ...(newCastingState && {\n        playlist,\n        currentIndex,\n        currentItem: playlist[currentIndex] || null,\n        isPlaying,\n        currentTime,\n        volume,\n        autoplay,\n      }),\n    });\n  };\n\n  // Handle media ended event\n  const handleMediaEnded = () => {\n    if (autoplay && playlist.length > 0) {\n      handleNext();\n    } else {\n      setIsPlaying(false);\n\n      if (isCasting) {\n        emitPlaybackState({ isPlaying: false });\n      }\n    }\n  };\n\n  // Effect to handle socket events from Player\n  useEffect(() => {\n    socket.on(\"request_state\", () => {\n      if (isCasting) {\n        // Send current state to player\n        emitCastingState({\n          isCasting: true,\n          playlist,\n          currentIndex,\n          currentItem: playlist[currentIndex] || null,\n          isPlaying,\n          currentTime,\n          volume,\n          autoplay,\n        });\n      }\n    });\n\n    return () => {\n      socket.off(\"request_state\");\n    };\n  }, [\n    playlist,\n    currentIndex,\n    isPlaying,\n    currentTime,\n    volume,\n    autoplay,\n    isCasting,\n  ]);\n\n  // Effect to sync media playback state when it changes\n  useEffect(() => {\n    if (mediaRef.current) {\n      if (isPlaying) {\n        mediaRef.current\n          .play()\n          .catch((e) => console.error(\"Playback error:\", e));\n      } else {\n        mediaRef.current.pause();\n      }\n    }\n  }, [isPlaying, currentIndex, playlist]);\n\n  // Effect to handle duration change\n  useEffect(() => {\n    const handleDurationChange = () => {\n      if (mediaRef.current) {\n        setDuration(mediaRef.current.duration || 0);\n      }\n    };\n\n    const mediaElement = mediaRef.current;\n    if (mediaElement) {\n      mediaElement.addEventListener(\"durationchange\", handleDurationChange);\n      mediaElement.addEventListener(\"loadedmetadata\", handleDurationChange);\n    }\n\n    return () => {\n      if (mediaElement) {\n        mediaElement.removeEventListener(\n          \"durationchange\",\n          handleDurationChange\n        );\n        mediaElement.removeEventListener(\n          \"loadedmetadata\",\n          handleDurationChange\n        );\n      }\n    };\n  }, [currentIndex, playlist]);\n  \n  // Current media item\n  const currentItem = playlist[currentIndex];\n\n  return (\n    <div className=\"flex flex-col h-screen\">\n      <header className=\"bg-gray-800 p-4 flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold text-teal-400\">Media Caster</h1>\n        <div className=\"flex items-center space-x-4\">\n          <button\n            onClick={toggleCasting}\n            className={`flex items-center space-x-1 px-3 py-1 rounded ${\n              isCasting\n                ? \"bg-red-600 hover:bg-red-700\"\n                : \"bg-teal-600 hover:bg-teal-700\"\n            }`}\n          >\n            {isCasting ? (\n              <>\n                <Square size={16} />\n                <span>Stop Casting</span>\n              </>\n            ) : (\n              <>\n                <Cast size={16} />\n                <span>Start Casting</span>\n              </>\n            )}\n          </button>\n        \n          <button\n            onClick={() => setShowDirectoryModal(true)}\n            className=\"flex items-center space-x-1 bg-teal-600 hover:bg-teal-700 px-3 py-1 rounded\"\n          >\n            <Plus size={16} />\n            <span>Add Directory</span>\n          </button>\n        </div>\n      </header>\n\n      <div className=\"flex flex-1 overflow-hidden\">\n        {/* Main content area */}\n        <div\n          className={`flex-1 p-4 flex flex-col ${\n            showPlaylist ? \"w-2/3\" : \"w-full\"\n          }`}\n        >\n          <div className=\"flex-1 bg-gray-800 rounded-lg overflow-hidden flex items-center justify-center\">\n            {currentItem && currentItem.type === \"video\" ? (\n              <video\n                ref={mediaRef}\n                src={currentItem.path}\n                className=\"max-h-full max-w-full\"\n                onTimeUpdate={handleTimeUpdate}\n                onEnded={handleMediaEnded}\n              />\n            ) : currentItem && currentItem.type === \"image\" ? (\n              <img\n                src={currentItem.path}\n                alt={currentItem.name}\n                className=\"max-h-full max-w-full object-contain\"\n              />\n            ) : (\n              <div className=\"text-gray-500\">No media selected</div>\n            )}\n          </div>\n\n          {/* Media controls */}\n          <MediaControls \n            isPlaying={isPlaying}\n            currentTime={currentTime}\n            duration={duration}\n            volume={volume}\n            autoplay={autoplay}\n            handlePrevious={handlePrevious}\n            handleNext={handleNext}\n            togglePlay={togglePlay}\n            handleSeek={handleSeek}\n            handleVolumeChange={handleVolumeChange}\n            toggleAutoplay={toggleAutoplay}\n            handleFullscreen={handleFullscreen}\n          />\n        </div>\n\n        {/* Playlist sidebar */}\n        {showPlaylist && (\n          <PlaylistSidebar \n            directories={directories}\n            playlist={playlist}\n            currentIndex={currentIndex}\n            isPlaying={isPlaying}\n            removeDirectory={removeDirectory}\n            removeFromPlaylist={removeFromPlaylist}\n            playMedia={playMedia}\n          />\n        )}\n      </div>\n\n      {/* Directory Selection Modal */}\n      <DirectoryModal\n        isOpen={showDirectoryModal}\n        onClose={() => setShowDirectoryModal(false)}\n        onAddDirectory={addDirectory}\n      />\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}