{"ast":null,"code":"import { io } from \"socket.io-client\";\n\n// Create socket connection - point to our local server in development\n// const SOCKET_URL = process.env.NODE_ENV === 'production' \n//   ? window.location.origin\n//   : 'http://localhost:5000';\n\n// const socket = io(SOCKET_URL, {\n//   transports: [\"websocket\"],\n//   autoConnect: true,\n// });\n\nconst SOCKET_URL = 'http://localhost:5000';\nconst socket = io(SOCKET_URL, {\n  transports: [\"websocket\"],\n  autoConnect: true\n});\n\n// Caster event emitters\nexport const emitCastingState = castingState => {\n  socket.emit(\"casting_state\", castingState);\n};\nexport const emitMediaChange = mediaData => {\n  socket.emit(\"media_change\", mediaData);\n};\nexport const emitPlaybackState = playbackState => {\n  socket.emit(\"playback_state\", playbackState);\n};\nexport const emitTimeUpdate = timeData => {\n  socket.emit(\"time_update\", timeData);\n};\nexport const emitVolumeChange = volumeData => {\n  socket.emit(\"volume_change\", volumeData);\n};\nexport const emitAutoplayChange = autoplayData => {\n  socket.emit(\"autoplay_change\", autoplayData);\n};\nexport const emitPlaylistUpdate = playlist => {\n  socket.emit(\"playlist_update\", playlist);\n};\nexport const requestState = () => {\n  socket.emit(\"request_state\");\n};\n\n// Join a specific casting session\nexport const joinSession = sessionId => {\n  console.log('Attempting to join session:', sessionId);\n  socket.emit(\"join_session\", sessionId);\n};\n\n// Get the current socket ID (useful for sharing session links)\nexport const getSocketId = () => {\n  return socket.id;\n};\n\n// Log connection status\nsocket.on('connect', () => {\n  console.log('Socket connected with ID:', socket.id);\n});\nsocket.on('disconnect', () => {\n  console.log('Socket disconnected');\n});\nsocket.on('error', error => {\n  console.error('Socket error:', error);\n});\n\n// Log when casting state is received\nsocket.on('casting_state', data => {\n  console.log('Received casting state:', data);\n});\nuseEffect(() => {\n  // Check URL for session ID\n  const searchParams = new URLSearchParams(window.location.search);\n  const sessionId = searchParams.get('session');\n  console.log(\"Player detected session ID:\", sessionId);\n  if (sessionId) {\n    joinSession(sessionId);\n  } else {\n    requestState();\n  }\n\n  // Rest of your code...\n}, []);\nexport default socket;","map":{"version":3,"names":["io","SOCKET_URL","socket","transports","autoConnect","emitCastingState","castingState","emit","emitMediaChange","mediaData","emitPlaybackState","playbackState","emitTimeUpdate","timeData","emitVolumeChange","volumeData","emitAutoplayChange","autoplayData","emitPlaylistUpdate","playlist","requestState","joinSession","sessionId","console","log","getSocketId","id","on","error","data","useEffect","searchParams","URLSearchParams","window","location","search","get"],"sources":["/Users/developmentsigncast.ca/Desktop/caster-final/src/services/socketService.js"],"sourcesContent":["import { io } from \"socket.io-client\";\n\n// Create socket connection - point to our local server in development\n// const SOCKET_URL = process.env.NODE_ENV === 'production' \n//   ? window.location.origin\n//   : 'http://localhost:5000';\n\n// const socket = io(SOCKET_URL, {\n//   transports: [\"websocket\"],\n//   autoConnect: true,\n// });\n\nconst SOCKET_URL = 'http://localhost:5000';\n\nconst socket = io(SOCKET_URL, {\n  transports: [\"websocket\"],\n  autoConnect: true,\n});\n\n// Caster event emitters\nexport const emitCastingState = (castingState) => {\n  socket.emit(\"casting_state\", castingState);\n};\n\nexport const emitMediaChange = (mediaData) => {\n  socket.emit(\"media_change\", mediaData);\n};\n\nexport const emitPlaybackState = (playbackState) => {\n  socket.emit(\"playback_state\", playbackState);\n};\n\nexport const emitTimeUpdate = (timeData) => {\n  socket.emit(\"time_update\", timeData);\n};\n\nexport const emitVolumeChange = (volumeData) => {\n  socket.emit(\"volume_change\", volumeData);\n};\n\nexport const emitAutoplayChange = (autoplayData) => {\n  socket.emit(\"autoplay_change\", autoplayData);\n};\n\nexport const emitPlaylistUpdate = (playlist) => {\n  socket.emit(\"playlist_update\", playlist);\n};\n\nexport const requestState = () => {\n  socket.emit(\"request_state\");\n};\n\n// Join a specific casting session\nexport const joinSession = (sessionId) => {\n    console.log('Attempting to join session:', sessionId);\n  socket.emit(\"join_session\", sessionId);\n};\n\n// Get the current socket ID (useful for sharing session links)\nexport const getSocketId = () => {\n  return socket.id;\n};\n\n\n// Log connection status\nsocket.on('connect', () => {\n    console.log('Socket connected with ID:', socket.id);\n  });\n  \n  socket.on('disconnect', () => {\n    console.log('Socket disconnected');\n  });\n  \n  socket.on('error', (error) => {\n    console.error('Socket error:', error);\n  });\n  \n  // Log when casting state is received\n  socket.on('casting_state', (data) => {\n    console.log('Received casting state:', data);\n  });\n\n\n  useEffect(() => {\n    // Check URL for session ID\n    const searchParams = new URLSearchParams(window.location.search);\n    const sessionId = searchParams.get('session');\n    \n    console.log(\"Player detected session ID:\", sessionId);\n    \n    if (sessionId) {\n      joinSession(sessionId);\n    } else {\n      requestState();\n    }\n    \n    // Rest of your code...\n  }, []);\nexport default socket;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}