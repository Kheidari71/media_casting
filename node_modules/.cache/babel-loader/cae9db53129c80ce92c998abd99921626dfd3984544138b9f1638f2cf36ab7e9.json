{"ast":null,"code":"var _jsxFileName = \"/Users/developmentsigncast.ca/Desktop/caster-final/src/components/Player/Player.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport socket, { requestState, joinSession } from \"../../services/socketService\";\n\n// Player component - minimal UI for displaying media\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Player() {\n  _s();\n  const [currentItem, setCurrentItem] = useState(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [volume, setVolume] = useState(1);\n  const [isCasting, setIsCasting] = useState(false);\n  const [isBuffering, setIsBuffering] = useState(true);\n  const [playbackAttempts, setPlaybackAttempts] = useState(0);\n  const mediaRef = useRef(null);\n  const bufferTimerRef = useRef(null);\n\n  // In Player.jsx\n  useEffect(() => {\n    // Check URL for session ID\n    const searchParams = new URLSearchParams(window.location.search);\n    const sessionId = searchParams.get('session');\n    console.log(\"Player detected session ID:\", sessionId);\n    if (sessionId) {\n      joinSession(sessionId);\n    } else {\n      requestState();\n    }\n  }, []);\n\n  // Effect to handle socket events from Caster\n  useEffect(() => {\n    // Clear any existing buffer timers\n    if (bufferTimerRef.current) {\n      clearTimeout(bufferTimerRef.current);\n    }\n    socket.on(\"casting_state\", data => {\n      console.log(\"Received casting state:\", data);\n      setIsCasting(data.isCasting);\n      if (data.isCasting) {\n        // Update all state if casting is active\n        if (data.currentItem) {\n          setCurrentItem(data.currentItem);\n          // Reset buffering state for new media\n          setIsBuffering(true);\n          setPlaybackAttempts(0);\n        }\n        if (data.isPlaying !== undefined) setIsPlaying(data.isPlaying);\n        if (data.currentTime !== undefined) setCurrentTime(data.currentTime);\n        if (data.volume !== undefined) setVolume(data.volume);\n      } else {\n        // Reset state if casting is stopped\n        setCurrentItem(null);\n        setIsPlaying(false);\n        setCurrentTime(0);\n      }\n    });\n    socket.on(\"media_change\", data => {\n      console.log(\"Media changed:\", data);\n      setCurrentItem(data.item);\n      setIsPlaying(data.isPlaying);\n      // Reset buffering state for new media\n      setIsBuffering(true);\n      setPlaybackAttempts(0);\n    });\n    socket.on(\"playback_state\", data => {\n      console.log(\"Playback state changed:\", data.isPlaying);\n      setIsPlaying(data.isPlaying);\n    });\n    socket.on(\"time_update\", data => {\n      // Don't log this to avoid console spam\n      setCurrentTime(data.currentTime);\n      if (mediaRef.current && !isBuffering) {\n        // Only update time if not buffering to avoid disruptions\n        mediaRef.current.currentTime = data.currentTime;\n      }\n    });\n    socket.on(\"volume_change\", data => {\n      console.log(\"Volume changed:\", data.volume);\n      setVolume(data.volume);\n      if (mediaRef.current) {\n        mediaRef.current.volume = data.volume;\n      }\n    });\n\n    // Request current state when connecting\n    requestState();\n    return () => {\n      // Clean up socket listeners and timers\n      socket.off(\"casting_state\");\n      socket.off(\"media_change\");\n      socket.off(\"playback_state\");\n      socket.off(\"time_update\");\n      socket.off(\"volume_change\");\n      if (bufferTimerRef.current) {\n        clearTimeout(bufferTimerRef.current);\n      }\n    };\n  }, [isBuffering]);\n  useEffect(() => {\n    // If we're buffering, set a max timeout to prevent getting stuck\n    if (isBuffering) {\n      const maxBufferTimer = setTimeout(() => {\n        console.log(\"Max buffer time reached, forcing playback\");\n        setIsBuffering(false);\n      }, 10000); // 10 seconds max buffer time\n\n      return () => clearTimeout(maxBufferTimer);\n    }\n  }, [isBuffering]);\n\n  // Effect to sync media playback state\n  useEffect(() => {\n    if (mediaRef.current && !isBuffering) {\n      if (isPlaying) {\n        console.log(\"Attempting to play video...\");\n        mediaRef.current.play().then(() => {\n          console.log(\"Playback started successfully\");\n          setPlaybackAttempts(0);\n        }).catch(e => {\n          console.error(\"Playback error:\", e);\n          // Increment attempts and try rebuffering if needed\n          const attempts = playbackAttempts + 1;\n          setPlaybackAttempts(attempts);\n          if (attempts < 3) {\n            console.log(`Retrying playback (attempt ${attempts})...`);\n            setIsBuffering(true);\n          }\n        });\n      } else {\n        mediaRef.current.pause();\n      }\n    }\n  }, [isPlaying, currentItem, isBuffering, playbackAttempts]);\n  const handleTimeUpdate = () => {\n    if (mediaRef.current) {\n      setCurrentTime(mediaRef.current.currentTime);\n    }\n  };\n  const handleMediaEnded = () => {\n    console.log(\"Media playback ended\");\n    setIsPlaying(false);\n  };\n  const handleBuffering = () => {\n    console.log(\"Video is buffering...\");\n    setIsBuffering(true);\n\n    // Clear any existing buffer timer\n    if (bufferTimerRef.current) {\n      clearTimeout(bufferTimerRef.current);\n    }\n  };\n  const handleCanPlay = () => {\n    console.log(\"Video can play - starting immediately\");\n    setIsBuffering(false);\n\n    // Force play\n    if (isPlaying && mediaRef.current) {\n      mediaRef.current.play().catch(e => console.error(\"Play error:\", e));\n    }\n\n    // Set a new buffer timer\n    bufferTimerRef.current = setTimeout(() => {\n      console.log(\"Buffer complete, resuming playback\");\n      setIsBuffering(false);\n\n      // Force play if needed\n      if (isPlaying && mediaRef.current) {\n        mediaRef.current.play().catch(e => console.error(\"Error playing after buffer:\", e));\n      }\n    }, 1000);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"h-screen w-screen bg-black flex flex-col relative\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-1 flex items-center justify-center overflow-hidden relative\",\n      children: isCasting ? currentItem && currentItem.type === \"video\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"video\", {\n          ref: mediaRef,\n          src: currentItem.path,\n          className: \"max-h-full max-w-full\",\n          preload: \"auto\",\n          playsInline: true,\n          onTimeUpdate: handleTimeUpdate,\n          onEnded: handleMediaEnded,\n          onWaiting: handleBuffering,\n          onStalled: handleBuffering,\n          onCanPlay: handleCanPlay,\n          onCanPlayThrough: handleCanPlay\n          // Try adding these attributes\n          ,\n          poster: \"\" // Empty poster to avoid additional loading\n          ,\n          muted: isBuffering // Muting during buffer can help performance\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 15\n        }, this), isBuffering && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"absolute inset-0 flex items-center justify-center bg-black bg-opacity-60 z-10\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-white text-xl\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mb-2\",\n              children: \"Buffering...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"w-16 h-16 border-4 border-t-transparent border-teal-500 rounded-full animate-spin mx-auto\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true) : currentItem && currentItem.type === \"image\" ? /*#__PURE__*/_jsxDEV(\"img\", {\n        src: currentItem.path,\n        alt: currentItem.name,\n        className: \"max-h-full max-w-full object-contain\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-gray-500\",\n        children: \"Waiting for media...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center p-8\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-4xl text-gray-500 mb-4\",\n          children: \"Waiting for Cast\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-400\",\n          children: \"The caster needs to press \\\"Start Casting\\\" to begin streaming content to this player.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 5\n  }, this);\n}\n_s(Player, \"9z1uhZtUW6unMieP5x7J/NJWSKs=\");\n_c = Player;\nvar _c;\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"names":["React","useState","useEffect","useRef","socket","requestState","joinSession","jsxDEV","_jsxDEV","Fragment","_Fragment","Player","_s","currentItem","setCurrentItem","isPlaying","setIsPlaying","currentTime","setCurrentTime","volume","setVolume","isCasting","setIsCasting","isBuffering","setIsBuffering","playbackAttempts","setPlaybackAttempts","mediaRef","bufferTimerRef","searchParams","URLSearchParams","window","location","search","sessionId","get","console","log","current","clearTimeout","on","data","undefined","item","off","maxBufferTimer","setTimeout","play","then","catch","e","error","attempts","pause","handleTimeUpdate","handleMediaEnded","handleBuffering","handleCanPlay","className","children","type","ref","src","path","preload","playsInline","onTimeUpdate","onEnded","onWaiting","onStalled","onCanPlay","onCanPlayThrough","poster","muted","fileName","_jsxFileName","lineNumber","columnNumber","alt","name","_c","$RefreshReg$"],"sources":["/Users/developmentsigncast.ca/Desktop/caster-final/src/components/Player/Player.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport socket, { requestState, joinSession } from \"../../services/socketService\";\n\n// Player component - minimal UI for displaying media\nexport default function Player() {\n  const [currentItem, setCurrentItem] = useState(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [volume, setVolume] = useState(1);\n  const [isCasting, setIsCasting] = useState(false);\n  const [isBuffering, setIsBuffering] = useState(true);\n  const [playbackAttempts, setPlaybackAttempts] = useState(0);\n  const mediaRef = useRef(null);\n  const bufferTimerRef = useRef(null);\n\n  // In Player.jsx\n  useEffect(() => {\n    // Check URL for session ID\n    const searchParams = new URLSearchParams(window.location.search);\n    const sessionId = searchParams.get('session');\n    \n    console.log(\"Player detected session ID:\", sessionId);\n    \n    if (sessionId) {\n      joinSession(sessionId);\n    } else {\n      requestState();\n    }\n  }, []);\n\n  // Effect to handle socket events from Caster\n  useEffect(() => {\n    // Clear any existing buffer timers\n    if (bufferTimerRef.current) {\n      clearTimeout(bufferTimerRef.current);\n    }\n\n    socket.on(\"casting_state\", (data) => {\n      console.log(\"Received casting state:\", data);\n      setIsCasting(data.isCasting);\n\n      if (data.isCasting) {\n        // Update all state if casting is active\n        if (data.currentItem) {\n          setCurrentItem(data.currentItem);\n          // Reset buffering state for new media\n          setIsBuffering(true);\n          setPlaybackAttempts(0);\n        }\n        if (data.isPlaying !== undefined) setIsPlaying(data.isPlaying);\n        if (data.currentTime !== undefined) setCurrentTime(data.currentTime);\n        if (data.volume !== undefined) setVolume(data.volume);\n      } else {\n        // Reset state if casting is stopped\n        setCurrentItem(null);\n        setIsPlaying(false);\n        setCurrentTime(0);\n      }\n    });\n\n    \n    socket.on(\"media_change\", (data) => {\n      console.log(\"Media changed:\", data);\n      setCurrentItem(data.item);\n      setIsPlaying(data.isPlaying);\n      // Reset buffering state for new media\n      setIsBuffering(true);\n      setPlaybackAttempts(0);\n    });\n    \n    socket.on(\"playback_state\", (data) => {\n      console.log(\"Playback state changed:\", data.isPlaying);\n      setIsPlaying(data.isPlaying);\n    });\n\n    socket.on(\"time_update\", (data) => {\n      // Don't log this to avoid console spam\n      setCurrentTime(data.currentTime);\n      if (mediaRef.current && !isBuffering) {\n        // Only update time if not buffering to avoid disruptions\n        mediaRef.current.currentTime = data.currentTime;\n      }\n    });\n\n    socket.on(\"volume_change\", (data) => {\n      console.log(\"Volume changed:\", data.volume);\n      setVolume(data.volume);\n      if (mediaRef.current) {\n        mediaRef.current.volume = data.volume;\n      }\n    });\n\n    // Request current state when connecting\n    requestState();\n\n    return () => {\n      // Clean up socket listeners and timers\n      socket.off(\"casting_state\");\n      socket.off(\"media_change\");\n      socket.off(\"playback_state\");\n      socket.off(\"time_update\");\n      socket.off(\"volume_change\");\n      \n      if (bufferTimerRef.current) {\n        clearTimeout(bufferTimerRef.current);\n      }\n    };\n  }, [isBuffering]);\nuseEffect(() => {\n  // If we're buffering, set a max timeout to prevent getting stuck\n  if (isBuffering) {\n    const maxBufferTimer = setTimeout(() => {\n      console.log(\"Max buffer time reached, forcing playback\");\n      setIsBuffering(false);\n    }, 10000); // 10 seconds max buffer time\n    \n    return () => clearTimeout(maxBufferTimer);\n  }\n}, [isBuffering]);\n\n  // Effect to sync media playback state\n  useEffect(() => {\n    if (mediaRef.current && !isBuffering) {\n      if (isPlaying) {\n        console.log(\"Attempting to play video...\");\n        mediaRef.current.play()\n          .then(() => {\n            console.log(\"Playback started successfully\");\n            setPlaybackAttempts(0);\n          })\n          .catch((e) => {\n            console.error(\"Playback error:\", e);\n            // Increment attempts and try rebuffering if needed\n            const attempts = playbackAttempts + 1;\n            setPlaybackAttempts(attempts);\n            \n            if (attempts < 3) {\n              console.log(`Retrying playback (attempt ${attempts})...`);\n              setIsBuffering(true);\n            }\n          });\n      } else {\n        mediaRef.current.pause();\n      }\n    }\n  }, [isPlaying, currentItem, isBuffering, playbackAttempts]);\n\n  const handleTimeUpdate = () => {\n    if (mediaRef.current) {\n      setCurrentTime(mediaRef.current.currentTime);\n    }\n  };\n  \n  const handleMediaEnded = () => {\n    console.log(\"Media playback ended\");\n    setIsPlaying(false);\n  };\n\n  const handleBuffering = () => {\n    console.log(\"Video is buffering...\");\n    setIsBuffering(true);\n    \n    // Clear any existing buffer timer\n    if (bufferTimerRef.current) {\n      clearTimeout(bufferTimerRef.current);\n    }\n  };\n\n  const handleCanPlay = () => {\n    console.log(\"Video can play - starting immediately\");\n    setIsBuffering(false);\n    \n    // Force play\n    if (isPlaying && mediaRef.current) {\n      mediaRef.current.play().catch(e => console.error(\"Play error:\", e));\n    }\n  \n    \n    // Set a new buffer timer\n    bufferTimerRef.current = setTimeout(() => {\n      console.log(\"Buffer complete, resuming playback\");\n      setIsBuffering(false);\n      \n      // Force play if needed\n      if (isPlaying && mediaRef.current) {\n        mediaRef.current.play()\n          .catch(e => console.error(\"Error playing after buffer:\", e));\n      }\n    }, 1000);\n  };\n\n  return (\n    <div className=\"h-screen w-screen bg-black flex flex-col relative\">\n      <div className=\"flex-1 flex items-center justify-center overflow-hidden relative\">\n        {isCasting ? (\n          currentItem && currentItem.type === \"video\" ? (\n            <>\n              <video\n  ref={mediaRef}\n  src={currentItem.path}\n  className=\"max-h-full max-w-full\"\n  preload=\"auto\"\n  playsInline\n  onTimeUpdate={handleTimeUpdate}\n  onEnded={handleMediaEnded}\n  onWaiting={handleBuffering}\n  onStalled={handleBuffering}\n  onCanPlay={handleCanPlay}\n  onCanPlayThrough={handleCanPlay}\n  // Try adding these attributes\n  poster=\"\" // Empty poster to avoid additional loading\n  muted={isBuffering} // Muting during buffer can help performance\n/>\n              {isBuffering && (\n                <div className=\"absolute inset-0 flex items-center justify-center bg-black bg-opacity-60 z-10\">\n                  <div className=\"text-white text-xl\">\n                    <div className=\"mb-2\">Buffering...</div>\n                    <div className=\"w-16 h-16 border-4 border-t-transparent border-teal-500 rounded-full animate-spin mx-auto\"></div>\n                  </div>\n                </div>\n              )}\n            </>\n          ) : currentItem && currentItem.type === \"image\" ? (\n            <img\n              src={currentItem.path}\n              alt={currentItem.name}\n              className=\"max-h-full max-w-full object-contain\"\n            />\n          ) : (\n            <div className=\"text-gray-500\">Waiting for media...</div>\n          )\n        ) : (\n          <div className=\"text-center p-8\">\n            <div className=\"text-4xl text-gray-500 mb-4\">Waiting for Cast</div>\n            <p className=\"text-gray-400\">\n              The caster needs to press \"Start Casting\" to begin streaming content\n              to this player.\n            </p>\n          </div>\n        )}\n      </div>\n      {/* {isBuffering && (\n  <div className=\"absolute inset-0 flex flex-col items-center justify-center bg-black bg-opacity-60 z-10\"> */}\n   \n    {/* Add this button to force play */}\n    {/* <button \n      onClick={() => {\n        setIsBuffering(false);\n        if (mediaRef.current) {\n          mediaRef.current.play().catch(e => console.error(\"Force play error:\", e));\n        }\n      }}\n      className=\"mt-4 bg-teal-500 hover:bg-teal-600 text-white font-bold py-2 px-4 rounded\"\n    >\n      Force Play\n    </button> */}\n  {/* </div>\n)} */}\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}