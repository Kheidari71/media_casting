{"ast":null,"code":"var _jsxFileName = \"/Users/developmentsigncast.ca/Desktop/caster-final/src/components/Player/Player.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport socket, { requestState, joinSession } from \"../../services/socketService\";\n\n// Player component - minimal UI for displaying media\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Player() {\n  _s();\n  const [currentItem, setCurrentItem] = useState(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [volume, setVolume] = useState(1);\n  const [isCasting, setIsCasting] = useState(false);\n  const mediaRef = useRef(null);\n\n  // In Player.jsx\n  useEffect(() => {\n    // Check URL for session ID\n    const searchParams = new URLSearchParams(window.location.search);\n    const sessionId = searchParams.get('session');\n    console.log(\"Player detected session ID:\", sessionId);\n    if (sessionId) {\n      joinSession(sessionId);\n    } else {\n      requestState();\n    }\n\n    // Rest of your event listeners...\n  }, []);\n\n  // Effect to handle socket events from Caster\n  useEffect(() => {\n    socket.on(\"casting_state\", data => {\n      setIsCasting(data.isCasting);\n      if (data.isCasting) {\n        // Update all state if casting is active\n        if (data.currentItem) setCurrentItem(data.currentItem);\n        if (data.isPlaying !== undefined) setIsPlaying(data.isPlaying);\n        if (data.currentTime !== undefined) setCurrentTime(data.currentTime);\n        if (data.volume !== undefined) setVolume(data.volume);\n      } else {\n        // Reset state if casting is stopped\n        setCurrentItem(null);\n        setIsPlaying(false);\n        setCurrentTime(0);\n      }\n    });\n    socket.on(\"media_change\", data => {\n      setCurrentItem(data.item);\n      setIsPlaying(data.isPlaying);\n    });\n    socket.on(\"playback_state\", data => {\n      setIsPlaying(data.isPlaying);\n    });\n    socket.on(\"time_update\", data => {\n      setCurrentTime(data.currentTime);\n      if (mediaRef.current) {\n        mediaRef.current.currentTime = data.currentTime;\n      }\n    });\n    socket.on(\"volume_change\", data => {\n      setVolume(data.volume);\n      if (mediaRef.current) {\n        mediaRef.current.volume = data.volume;\n      }\n    });\n\n    // Request current state when connecting\n    requestState();\n    return () => {\n      socket.off(\"casting_state\");\n      socket.off(\"media_change\");\n      socket.off(\"playback_state\");\n      socket.off(\"time_update\");\n      socket.off(\"volume_change\");\n    };\n  }, []);\n\n  // Effect to sync media playback state\n  useEffect(() => {\n    if (mediaRef.current) {\n      if (isPlaying) {\n        mediaRef.current.play().catch(e => console.error(\"Playback error:\", e));\n      } else {\n        mediaRef.current.pause();\n      }\n    }\n  }, [isPlaying, currentItem]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"h-screen w-screen bg-black flex flex-col relative\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute top-4 left-4 z-10\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-1 flex items-center justify-center overflow-hidden\",\n      children: isCasting ? currentItem && currentItem.type === \"video\" ? /*#__PURE__*/_jsxDEV(\"video\", {\n        ref: mediaRef,\n        src: currentItem.path,\n        className: \"max-h-full max-w-full\",\n        playsInline: true,\n        preload: \"auto\",\n        playsInline: true,\n        onTimeUpdate: handleTimeUpdate,\n        onEnded: handleMediaEnded\n        // Add a buffer before playing\n        ,\n        onCanPlay: () => {\n          console.log(\"Video can play, buffering...\");\n          // Optionally add a short delay before playing\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this) : currentItem && currentItem.type === \"image\" ? /*#__PURE__*/_jsxDEV(\"img\", {\n        src: currentItem.path,\n        alt: currentItem.name,\n        className: \"max-h-full max-w-full object-contain\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-gray-500\",\n        children: \"Waiting for media...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center p-8\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-4xl text-gray-500 mb-4\",\n          children: \"Waiting for Cast\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-400\",\n          children: \"The caster needs to press \\\"Start Casting\\\" to begin streaming content to this player.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n_s(Player, \"CE5QgeWP++ZAV4MPWOPSxd3U7A0=\");\n_c = Player;\nvar _c;\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"names":["React","useState","useEffect","useRef","socket","requestState","joinSession","jsxDEV","_jsxDEV","Player","_s","currentItem","setCurrentItem","isPlaying","setIsPlaying","currentTime","setCurrentTime","volume","setVolume","isCasting","setIsCasting","mediaRef","searchParams","URLSearchParams","window","location","search","sessionId","get","console","log","on","data","undefined","item","current","off","play","catch","e","error","pause","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","ref","src","path","playsInline","preload","onTimeUpdate","handleTimeUpdate","onEnded","handleMediaEnded","onCanPlay","alt","name","_c","$RefreshReg$"],"sources":["/Users/developmentsigncast.ca/Desktop/caster-final/src/components/Player/Player.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport socket, { requestState, joinSession } from \"../../services/socketService\";\n\n\n// Player component - minimal UI for displaying media\nexport default function Player() {\n  const [currentItem, setCurrentItem] = useState(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [volume, setVolume] = useState(1);\n  const [isCasting, setIsCasting] = useState(false);\n\n  const mediaRef = useRef(null);\n\n\n\n// In Player.jsx\nuseEffect(() => {\n    // Check URL for session ID\n    const searchParams = new URLSearchParams(window.location.search);\n    const sessionId = searchParams.get('session');\n    \n    console.log(\"Player detected session ID:\", sessionId);\n    \n    if (sessionId) {\n      joinSession(sessionId);\n    } else {\n      requestState();\n    }\n    \n    // Rest of your event listeners...\n  }, []);\n\n  // Effect to handle socket events from Caster\n  useEffect(() => {\n    socket.on(\"casting_state\", (data) => {\n      setIsCasting(data.isCasting);\n\n      if (data.isCasting) {\n        // Update all state if casting is active\n        if (data.currentItem) setCurrentItem(data.currentItem);\n        if (data.isPlaying !== undefined) setIsPlaying(data.isPlaying);\n        if (data.currentTime !== undefined) setCurrentTime(data.currentTime);\n        if (data.volume !== undefined) setVolume(data.volume);\n      } else {\n        // Reset state if casting is stopped\n        setCurrentItem(null);\n        setIsPlaying(false);\n        setCurrentTime(0);\n      }\n    });\n\n    socket.on(\"media_change\", (data) => {\n      setCurrentItem(data.item);\n      setIsPlaying(data.isPlaying);\n    });\n    \n    socket.on(\"playback_state\", (data) => {\n      setIsPlaying(data.isPlaying);\n    });\n\n    socket.on(\"time_update\", (data) => {\n      setCurrentTime(data.currentTime);\n      if (mediaRef.current) {\n        mediaRef.current.currentTime = data.currentTime;\n      }\n    });\n\n    socket.on(\"volume_change\", (data) => {\n      setVolume(data.volume);\n      if (mediaRef.current) {\n        mediaRef.current.volume = data.volume;\n      }\n    });\n\n    // Request current state when connecting\n    requestState();\n\n    return () => {\n      socket.off(\"casting_state\");\n      socket.off(\"media_change\");\n      socket.off(\"playback_state\");\n      socket.off(\"time_update\");\n      socket.off(\"volume_change\");\n    };\n  }, []);\n\n  // Effect to sync media playback state\n  useEffect(() => {\n    if (mediaRef.current) {\n      if (isPlaying) {\n        mediaRef.current\n          .play()\n          .catch((e) => console.error(\"Playback error:\", e));\n      } else {\n        mediaRef.current.pause();\n      }\n    }\n  }, [isPlaying, currentItem]);\n\n  return (\n    <div className=\"h-screen w-screen bg-black flex flex-col relative\">\n      <div className=\"absolute top-4 left-4 z-10\">\n       \n      </div>\n      <div className=\"flex-1 flex items-center justify-center overflow-hidden\">\n      {isCasting ? (\n        currentItem && currentItem.type === \"video\" ? (\n          <video\n            ref={mediaRef}\n            src={currentItem.path}\n            className=\"max-h-full max-w-full\"\n            playsInline\n            preload=\"auto\"\n    playsInline\n    onTimeUpdate={handleTimeUpdate}\n    onEnded={handleMediaEnded}\n    // Add a buffer before playing\n    onCanPlay={() => {\n      console.log(\"Video can play, buffering...\");\n      // Optionally add a short delay before playing\n    }}\n          />\n        ) : currentItem && currentItem.type === \"image\" ? (\n          <img\n            src={currentItem.path}\n            alt={currentItem.name}\n            className=\"max-h-full max-w-full object-contain\"\n          />\n        ) : (\n          <div className=\"text-gray-500\">Waiting for media...</div>\n        )\n      ) : (\n        <div className=\"text-center p-8\">\n          <div className=\"text-4xl text-gray-500 mb-4\">Waiting for Cast</div>\n          <p className=\"text-gray-400\">\n            The caster needs to press \"Start Casting\" to begin streaming content\n            to this player.\n          </p>\n        </div>\n      )}\n    </div>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}