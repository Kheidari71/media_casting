{"ast":null,"code":"var _jsxFileName = \"/Users/developmentsigncast.ca/Desktop/caster-final/src/components/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport LandingPage from \"./LandingPage\";\nimport Caster from \"./Caster\";\nimport Player from \"./Player/Player\";\n\n// Main App component that handles routing between the interfaces\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const [page, setPage] = useState(\"landing\");\n\n  // Navigate to a specific page\n  const navigateTo = pageName => {\n    setPage(pageName);\n    // Update URL without refreshing the page\n    window.history.pushState({}, \"\", pageName === \"landing\" ? \"/\" : `/${pageName}`);\n  };\n\n  // Check URL on initial load and handle browser history navigation\n  useEffect(() => {\n    // Function to parse the current path and set page state\n    const handleLocationChange = () => {\n      const path = window.location.pathname;\n      if (path.includes(\"player\")) {\n        setPage(\"player\");\n      } else if (path.includes(\"caster\")) {\n        setPage(\"caster\");\n      } else {\n        setPage(\"landing\");\n      }\n    };\n\n    // Set initial page based on URL\n    handleLocationChange();\n\n    // Listen to popstate event (when user clicks back/forward browser buttons)\n    window.addEventListener(\"popstate\", handleLocationChange);\n\n    // Cleanup event listener when component unmounts\n    return () => {\n      window.removeEventListener(\"popstate\", handleLocationChange);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gray-900 text-white\",\n    children: [page === \"landing\" && /*#__PURE__*/_jsxDEV(LandingPage, {\n      onNavigate: navigateTo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 30\n    }, this), page === \"caster\" && /*#__PURE__*/_jsxDEV(Caster, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 29\n    }, this), page === \"player\" && /*#__PURE__*/_jsxDEV(Player, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"0Ac0HJC645HEZs1k0G+ghPBL8Hc=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","LandingPage","Caster","Player","jsxDEV","_jsxDEV","App","_s","page","setPage","navigateTo","pageName","window","history","pushState","handleLocationChange","path","location","pathname","includes","addEventListener","removeEventListener","className","children","onNavigate","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/developmentsigncast.ca/Desktop/caster-final/src/components/App.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport LandingPage from \"./LandingPage\";\nimport Caster from \"./Caster\";\nimport Player from \"./Player/Player\";\n\n// Main App component that handles routing between the interfaces\nexport default function App() {\n  const [page, setPage] = useState(\"landing\");\n\n  // Navigate to a specific page\n  const navigateTo = (pageName) => {\n    setPage(pageName);\n    // Update URL without refreshing the page\n    window.history.pushState(\n      {},\n      \"\",\n      pageName === \"landing\" ? \"/\" : `/${pageName}`\n    );\n  };\n\n  // Check URL on initial load and handle browser history navigation\n  useEffect(() => {\n    // Function to parse the current path and set page state\n    const handleLocationChange = () => {\n      const path = window.location.pathname;\n      if (path.includes(\"player\")) {\n        setPage(\"player\");\n      } else if (path.includes(\"caster\")) {\n        setPage(\"caster\");\n      } else {\n        setPage(\"landing\");\n      }\n    };\n\n    // Set initial page based on URL\n    handleLocationChange();\n\n    // Listen to popstate event (when user clicks back/forward browser buttons)\n    window.addEventListener(\"popstate\", handleLocationChange);\n\n    // Cleanup event listener when component unmounts\n    return () => {\n      window.removeEventListener(\"popstate\", handleLocationChange);\n    };\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-gray-900 text-white\">\n      {page === \"landing\" && <LandingPage onNavigate={navigateTo} />}\n      {page === \"caster\" && <Caster />}\n      {page === \"player\" && <Player />}\n    </div>\n  );\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,MAAM,MAAM,iBAAiB;;AAEpC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,eAAe,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,SAAS,CAAC;;EAE3C;EACA,MAAMW,UAAU,GAAIC,QAAQ,IAAK;IAC/BF,OAAO,CAACE,QAAQ,CAAC;IACjB;IACAC,MAAM,CAACC,OAAO,CAACC,SAAS,CACtB,CAAC,CAAC,EACF,EAAE,EACFH,QAAQ,KAAK,SAAS,GAAG,GAAG,GAAG,IAAIA,QAAQ,EAC7C,CAAC;EACH,CAAC;;EAED;EACAX,SAAS,CAAC,MAAM;IACd;IACA,MAAMe,oBAAoB,GAAGA,CAAA,KAAM;MACjC,MAAMC,IAAI,GAAGJ,MAAM,CAACK,QAAQ,CAACC,QAAQ;MACrC,IAAIF,IAAI,CAACG,QAAQ,CAAC,QAAQ,CAAC,EAAE;QAC3BV,OAAO,CAAC,QAAQ,CAAC;MACnB,CAAC,MAAM,IAAIO,IAAI,CAACG,QAAQ,CAAC,QAAQ,CAAC,EAAE;QAClCV,OAAO,CAAC,QAAQ,CAAC;MACnB,CAAC,MAAM;QACLA,OAAO,CAAC,SAAS,CAAC;MACpB;IACF,CAAC;;IAED;IACAM,oBAAoB,CAAC,CAAC;;IAEtB;IACAH,MAAM,CAACQ,gBAAgB,CAAC,UAAU,EAAEL,oBAAoB,CAAC;;IAEzD;IACA,OAAO,MAAM;MACXH,MAAM,CAACS,mBAAmB,CAAC,UAAU,EAAEN,oBAAoB,CAAC;IAC9D,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEV,OAAA;IAAKiB,SAAS,EAAC,qCAAqC;IAAAC,QAAA,GACjDf,IAAI,KAAK,SAAS,iBAAIH,OAAA,CAACJ,WAAW;MAACuB,UAAU,EAAEd;IAAW;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAC7DpB,IAAI,KAAK,QAAQ,iBAAIH,OAAA,CAACH,MAAM;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAC/BpB,IAAI,KAAK,QAAQ,iBAAIH,OAAA,CAACF,MAAM;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7B,CAAC;AAEV;AAACrB,EAAA,CA/CuBD,GAAG;AAAAuB,EAAA,GAAHvB,GAAG;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}