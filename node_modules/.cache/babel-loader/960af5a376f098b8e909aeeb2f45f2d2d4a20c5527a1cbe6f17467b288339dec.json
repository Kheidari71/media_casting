{"ast":null,"code":"import { io } from \"socket.io-client\";\n\n// Create socket connection - point to our local server in development\nconst SOCKET_URL = 'http://192.168.0.161:5000';\nconst socket = io(SOCKET_URL, {\n  transports: [\"websocket\"],\n  autoConnect: true\n});\n\n// Log connection status\nsocket.on('connect', () => {\n  console.log('Socket connected with ID:', socket.id);\n});\nsocket.on('disconnect', () => {\n  console.log('Socket disconnected');\n});\nsocket.on('error', error => {\n  console.error('Socket error:', error);\n});\n\n// Log when casting state is received\nsocket.on('casting_state', data => {\n  console.log('Received casting state:', data);\n});\n\n// Caster event emitters\nexport const emitCastingState = castingState => {\n  console.log('Emitting casting state:', castingState);\n  socket.emit(\"casting_state\", castingState);\n};\nexport const emitMediaChange = mediaData => {\n  console.log('Emitting media change:', mediaData);\n  socket.emit(\"media_change\", mediaData);\n};\nexport const emitPlaybackState = playbackState => {\n  console.log('Emitting playback state:', playbackState);\n  socket.emit(\"playback_state\", playbackState);\n};\nexport const emitTimeUpdate = timeData => {\n  // Time updates are frequent, so we don't log them to avoid console spam\n  socket.emit(\"time_update\", timeData);\n};\nexport const emitVolumeChange = volumeData => {\n  console.log('Emitting volume change:', volumeData);\n  socket.emit(\"volume_change\", volumeData);\n};\nexport const emitAutoplayChange = autoplayData => {\n  console.log('Emitting autoplay change:', autoplayData);\n  socket.emit(\"autoplay_change\", autoplayData);\n};\nexport const emitPlaylistUpdate = playlist => {\n  console.log('Emitting playlist update, length:', playlist.length);\n  socket.emit(\"playlist_update\", playlist);\n};\nexport const requestState = () => {\n  console.log('Requesting current state');\n  socket.emit(\"request_state\");\n};\n\n// Join a specific casting session\nexport const joinSession = sessionId => {\n  console.log('Attempting to join session:', sessionId);\n  socket.emit(\"join_session\", sessionId);\n};\n\n// Get the current socket ID (useful for sharing session links)\nexport const getSocketId = () => {\n  console.log('Getting socket ID:', socket.id);\n  return socket.id;\n};\nexport default socket;","map":{"version":3,"names":["io","SOCKET_URL","socket","transports","autoConnect","on","console","log","id","error","data","emitCastingState","castingState","emit","emitMediaChange","mediaData","emitPlaybackState","playbackState","emitTimeUpdate","timeData","emitVolumeChange","volumeData","emitAutoplayChange","autoplayData","emitPlaylistUpdate","playlist","length","requestState","joinSession","sessionId","getSocketId"],"sources":["/Users/developmentsigncast.ca/Desktop/caster-final/src/services/socketService.js"],"sourcesContent":["import { io } from \"socket.io-client\";\n\n// Create socket connection - point to our local server in development\nconst SOCKET_URL = 'http://192.168.0.161:5000';\n\nconst socket = io(SOCKET_URL, {\n  transports: [\"websocket\"],\n  autoConnect: true,\n});\n\n// Log connection status\nsocket.on('connect', () => {\n  console.log('Socket connected with ID:', socket.id);\n});\n\nsocket.on('disconnect', () => {\n  console.log('Socket disconnected');\n});\n\nsocket.on('error', (error) => {\n  console.error('Socket error:', error);\n});\n\n// Log when casting state is received\nsocket.on('casting_state', (data) => {\n  console.log('Received casting state:', data);\n});\n\n// Caster event emitters\nexport const emitCastingState = (castingState) => {\n  console.log('Emitting casting state:', castingState);\n  socket.emit(\"casting_state\", castingState);\n};\n\nexport const emitMediaChange = (mediaData) => {\n  console.log('Emitting media change:', mediaData);\n  socket.emit(\"media_change\", mediaData);\n};\n\nexport const emitPlaybackState = (playbackState) => {\n  console.log('Emitting playback state:', playbackState);\n  socket.emit(\"playback_state\", playbackState);\n};\n\nexport const emitTimeUpdate = (timeData) => {\n  // Time updates are frequent, so we don't log them to avoid console spam\n  socket.emit(\"time_update\", timeData);\n};\n\nexport const emitVolumeChange = (volumeData) => {\n  console.log('Emitting volume change:', volumeData);\n  socket.emit(\"volume_change\", volumeData);\n};\n\nexport const emitAutoplayChange = (autoplayData) => {\n  console.log('Emitting autoplay change:', autoplayData);\n  socket.emit(\"autoplay_change\", autoplayData);\n};\n\nexport const emitPlaylistUpdate = (playlist) => {\n  console.log('Emitting playlist update, length:', playlist.length);\n  socket.emit(\"playlist_update\", playlist);\n};\n\nexport const requestState = () => {\n  console.log('Requesting current state');\n  socket.emit(\"request_state\");\n};\n\n// Join a specific casting session\nexport const joinSession = (sessionId) => {\n  console.log('Attempting to join session:', sessionId);\n  socket.emit(\"join_session\", sessionId);\n};\n\n// Get the current socket ID (useful for sharing session links)\nexport const getSocketId = () => {\n  console.log('Getting socket ID:', socket.id);\n  return socket.id;\n};\n\nexport default socket;"],"mappings":"AAAA,SAASA,EAAE,QAAQ,kBAAkB;;AAErC;AACA,MAAMC,UAAU,GAAG,2BAA2B;AAE9C,MAAMC,MAAM,GAAGF,EAAE,CAACC,UAAU,EAAE;EAC5BE,UAAU,EAAE,CAAC,WAAW,CAAC;EACzBC,WAAW,EAAE;AACf,CAAC,CAAC;;AAEF;AACAF,MAAM,CAACG,EAAE,CAAC,SAAS,EAAE,MAAM;EACzBC,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEL,MAAM,CAACM,EAAE,CAAC;AACrD,CAAC,CAAC;AAEFN,MAAM,CAACG,EAAE,CAAC,YAAY,EAAE,MAAM;EAC5BC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;AACpC,CAAC,CAAC;AAEFL,MAAM,CAACG,EAAE,CAAC,OAAO,EAAGI,KAAK,IAAK;EAC5BH,OAAO,CAACG,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;AACvC,CAAC,CAAC;;AAEF;AACAP,MAAM,CAACG,EAAE,CAAC,eAAe,EAAGK,IAAI,IAAK;EACnCJ,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEG,IAAI,CAAC;AAC9C,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,gBAAgB,GAAIC,YAAY,IAAK;EAChDN,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEK,YAAY,CAAC;EACpDV,MAAM,CAACW,IAAI,CAAC,eAAe,EAAED,YAAY,CAAC;AAC5C,CAAC;AAED,OAAO,MAAME,eAAe,GAAIC,SAAS,IAAK;EAC5CT,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEQ,SAAS,CAAC;EAChDb,MAAM,CAACW,IAAI,CAAC,cAAc,EAAEE,SAAS,CAAC;AACxC,CAAC;AAED,OAAO,MAAMC,iBAAiB,GAAIC,aAAa,IAAK;EAClDX,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEU,aAAa,CAAC;EACtDf,MAAM,CAACW,IAAI,CAAC,gBAAgB,EAAEI,aAAa,CAAC;AAC9C,CAAC;AAED,OAAO,MAAMC,cAAc,GAAIC,QAAQ,IAAK;EAC1C;EACAjB,MAAM,CAACW,IAAI,CAAC,aAAa,EAAEM,QAAQ,CAAC;AACtC,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAIC,UAAU,IAAK;EAC9Cf,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEc,UAAU,CAAC;EAClDnB,MAAM,CAACW,IAAI,CAAC,eAAe,EAAEQ,UAAU,CAAC;AAC1C,CAAC;AAED,OAAO,MAAMC,kBAAkB,GAAIC,YAAY,IAAK;EAClDjB,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEgB,YAAY,CAAC;EACtDrB,MAAM,CAACW,IAAI,CAAC,iBAAiB,EAAEU,YAAY,CAAC;AAC9C,CAAC;AAED,OAAO,MAAMC,kBAAkB,GAAIC,QAAQ,IAAK;EAC9CnB,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEkB,QAAQ,CAACC,MAAM,CAAC;EACjExB,MAAM,CAACW,IAAI,CAAC,iBAAiB,EAAEY,QAAQ,CAAC;AAC1C,CAAC;AAED,OAAO,MAAME,YAAY,GAAGA,CAAA,KAAM;EAChCrB,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;EACvCL,MAAM,CAACW,IAAI,CAAC,eAAe,CAAC;AAC9B,CAAC;;AAED;AACA,OAAO,MAAMe,WAAW,GAAIC,SAAS,IAAK;EACxCvB,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEsB,SAAS,CAAC;EACrD3B,MAAM,CAACW,IAAI,CAAC,cAAc,EAAEgB,SAAS,CAAC;AACxC,CAAC;;AAED;AACA,OAAO,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAC/BxB,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEL,MAAM,CAACM,EAAE,CAAC;EAC5C,OAAON,MAAM,CAACM,EAAE;AAClB,CAAC;AAED,eAAeN,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}