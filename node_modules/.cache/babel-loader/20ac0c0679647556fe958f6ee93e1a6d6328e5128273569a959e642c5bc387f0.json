{"ast":null,"code":"var _jsxFileName = \"/Users/developmentsigncast.ca/Desktop/caster-final/src/components/Player/Player.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport socket, { requestState, joinSession } from \"../../services/socketService\";\n\n// Player component - minimal UI for displaying media\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Player() {\n  _s();\n  const [currentItem, setCurrentItem] = useState(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [volume, setVolume] = useState(1);\n  const [isCasting, setIsCasting] = useState(false);\n  const lastTimeUpdateRef = useRef(0);\n  const syncInProgressRef = useRef(false);\n  const mediaRef = useRef(null);\n\n  // Check URL for session ID on initial load\n  useEffect(() => {\n    const searchParams = new URLSearchParams(window.location.search);\n    const sessionId = searchParams.get('session');\n    console.log(\"Player detected session ID:\", sessionId);\n    if (sessionId) {\n      joinSession(sessionId);\n    } else {\n      requestState();\n    }\n  }, []);\n\n  // Effect to handle socket events from Caster\n  useEffect(() => {\n    socket.on(\"casting_state\", data => {\n      console.log(\"Received casting state:\", data);\n      setIsCasting(data.isCasting);\n      if (data.isCasting) {\n        // Update all state if casting is active\n        if (data.currentItem) setCurrentItem(data.currentItem);\n        if (data.isPlaying !== undefined) setIsPlaying(data.isPlaying);\n        if (data.currentTime !== undefined) {\n          setCurrentTime(data.currentTime);\n          // On initial load, set the time directly\n          if (mediaRef.current) {\n            mediaRef.current.currentTime = data.currentTime;\n          }\n        }\n        if (data.volume !== undefined) setVolume(data.volume);\n      } else {\n        // Reset state if casting is stopped\n        setCurrentItem(null);\n        setIsPlaying(false);\n        setCurrentTime(0);\n      }\n    });\n    socket.on(\"media_change\", data => {\n      console.log(\"Media changed:\", data);\n      setCurrentItem(data.item);\n      setIsPlaying(data.isPlaying);\n      syncInProgressRef.current = false;\n    });\n    socket.on(\"playback_state\", data => {\n      console.log(\"Playback state changed:\", data.isPlaying);\n      setIsPlaying(data.isPlaying);\n    });\n    socket.on(\"time_update\", data => {\n      // Update our internal time state\n      setCurrentTime(data.currentTime);\n\n      // Only handle huge time discrepancies or after pauses\n      if (mediaRef.current && !syncInProgressRef.current) {\n        const currentPlayerTime = mediaRef.current.currentTime;\n        const timeDiff = Math.abs(currentPlayerTime - data.currentTime);\n\n        // Only sync if difference is > 5 seconds or after play/pause\n        if (timeDiff > 5) {\n          console.log(`Time difference too large (${timeDiff.toFixed(2)}s), syncing...`);\n          syncInProgressRef.current = true;\n\n          // Set the time and wait for seeking to finish\n          mediaRef.current.currentTime = data.currentTime;\n\n          // Reset sync flag after seeking is done\n          setTimeout(() => {\n            syncInProgressRef.current = false;\n          }, 500);\n        }\n      }\n\n      // Update last time update\n      lastTimeUpdateRef.current = Date.now();\n    });\n    socket.on(\"volume_change\", data => {\n      console.log(\"Volume changed:\", data.volume);\n      setVolume(data.volume);\n      if (mediaRef.current) {\n        mediaRef.current.volume = data.volume;\n      }\n    });\n    return () => {\n      socket.off(\"casting_state\");\n      socket.off(\"media_change\");\n      socket.off(\"playback_state\");\n      socket.off(\"time_update\");\n      socket.off(\"volume_change\");\n    };\n  }, []);\n\n  // Effect to sync media playback state\n  useEffect(() => {\n    if (mediaRef.current) {\n      if (isPlaying) {\n        console.log(\"Attempting to play video...\");\n        mediaRef.current.play().then(() => {\n          console.log(\"Playback started successfully\");\n        }).catch(e => {\n          console.error(\"Playback error:\", e);\n        });\n      } else {\n        mediaRef.current.pause();\n      }\n    }\n  }, [isPlaying, currentItem]);\n  const handleTimeUpdate = () => {\n    // We don't need to do anything special here\n    // Just let the video play smoothly\n  };\n  const handleMediaEnded = () => {\n    console.log(\"Media playback ended\");\n    setIsPlaying(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"h-screen w-screen bg-black flex flex-col relative\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-1 flex items-center justify-center overflow-hidden\",\n      children: isCasting ? currentItem && currentItem.type === \"video\" ? /*#__PURE__*/_jsxDEV(\"video\", {\n        ref: mediaRef,\n        src: currentItem.path,\n        className: \"max-h-full max-w-full\",\n        preload: \"auto\",\n        playsInline: true,\n        onTimeUpdate: handleTimeUpdate,\n        onEnded: handleMediaEnded\n        // Add additional event handlers for debugging\n        ,\n        onSeeked: () => console.log(\"Video seeked\"),\n        onError: e => console.error(\"Video error:\", e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }, this) : currentItem && currentItem.type === \"image\" ? /*#__PURE__*/_jsxDEV(\"img\", {\n        src: currentItem.path,\n        alt: currentItem.name,\n        className: \"max-h-full max-w-full object-contain\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-gray-500\",\n        children: \"Waiting for media...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center p-8\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-4xl text-gray-500 mb-4\",\n          children: \"Waiting for Cast\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-400\",\n          children: \"The caster needs to press \\\"Start Casting\\\" to begin streaming content to this player.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 5\n  }, this);\n}\n_s(Player, \"IllXyBL4EchAq3SRBcROhBBiGB0=\");\n_c = Player;\nvar _c;\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"names":["React","useState","useEffect","useRef","socket","requestState","joinSession","jsxDEV","_jsxDEV","Player","_s","currentItem","setCurrentItem","isPlaying","setIsPlaying","currentTime","setCurrentTime","volume","setVolume","isCasting","setIsCasting","lastTimeUpdateRef","syncInProgressRef","mediaRef","searchParams","URLSearchParams","window","location","search","sessionId","get","console","log","on","data","undefined","current","item","currentPlayerTime","timeDiff","Math","abs","toFixed","setTimeout","Date","now","off","play","then","catch","e","error","pause","handleTimeUpdate","handleMediaEnded","className","children","type","ref","src","path","preload","playsInline","onTimeUpdate","onEnded","onSeeked","onError","fileName","_jsxFileName","lineNumber","columnNumber","alt","name","_c","$RefreshReg$"],"sources":["/Users/developmentsigncast.ca/Desktop/caster-final/src/components/Player/Player.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport socket, { requestState, joinSession } from \"../../services/socketService\";\n\n// Player component - minimal UI for displaying media\nexport default function Player() {\n  const [currentItem, setCurrentItem] = useState(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [volume, setVolume] = useState(1);\n  const [isCasting, setIsCasting] = useState(false);\n  const lastTimeUpdateRef = useRef(0);\n  const syncInProgressRef = useRef(false);\n  const mediaRef = useRef(null);\n\n  // Check URL for session ID on initial load\n  useEffect(() => {\n    const searchParams = new URLSearchParams(window.location.search);\n    const sessionId = searchParams.get('session');\n    \n    console.log(\"Player detected session ID:\", sessionId);\n    \n    if (sessionId) {\n      joinSession(sessionId);\n    } else {\n      requestState();\n    }\n  }, []);\n\n  // Effect to handle socket events from Caster\n  useEffect(() => {\n    socket.on(\"casting_state\", (data) => {\n      console.log(\"Received casting state:\", data);\n      setIsCasting(data.isCasting);\n\n      if (data.isCasting) {\n        // Update all state if casting is active\n        if (data.currentItem) setCurrentItem(data.currentItem);\n        if (data.isPlaying !== undefined) setIsPlaying(data.isPlaying);\n        if (data.currentTime !== undefined) {\n          setCurrentTime(data.currentTime);\n          // On initial load, set the time directly\n          if (mediaRef.current) {\n            mediaRef.current.currentTime = data.currentTime;\n          }\n        }\n        if (data.volume !== undefined) setVolume(data.volume);\n      } else {\n        // Reset state if casting is stopped\n        setCurrentItem(null);\n        setIsPlaying(false);\n        setCurrentTime(0);\n      }\n    });\n\n    socket.on(\"media_change\", (data) => {\n      console.log(\"Media changed:\", data);\n      setCurrentItem(data.item);\n      setIsPlaying(data.isPlaying);\n      syncInProgressRef.current = false;\n    });\n    \n    socket.on(\"playback_state\", (data) => {\n      console.log(\"Playback state changed:\", data.isPlaying);\n      setIsPlaying(data.isPlaying);\n    });\n\n    socket.on(\"time_update\", (data) => {\n      // Update our internal time state\n      setCurrentTime(data.currentTime);\n      \n      // Only handle huge time discrepancies or after pauses\n      if (mediaRef.current && !syncInProgressRef.current) {\n        const currentPlayerTime = mediaRef.current.currentTime;\n        const timeDiff = Math.abs(currentPlayerTime - data.currentTime);\n        \n        // Only sync if difference is > 5 seconds or after play/pause\n        if (timeDiff > 5) {\n          console.log(`Time difference too large (${timeDiff.toFixed(2)}s), syncing...`);\n          syncInProgressRef.current = true;\n          \n          // Set the time and wait for seeking to finish\n          mediaRef.current.currentTime = data.currentTime;\n          \n          // Reset sync flag after seeking is done\n          setTimeout(() => {\n            syncInProgressRef.current = false;\n          }, 500);\n        }\n      }\n      \n      // Update last time update\n      lastTimeUpdateRef.current = Date.now();\n    });\n\n    socket.on(\"volume_change\", (data) => {\n      console.log(\"Volume changed:\", data.volume);\n      setVolume(data.volume);\n      if (mediaRef.current) {\n        mediaRef.current.volume = data.volume;\n      }\n    });\n\n    return () => {\n      socket.off(\"casting_state\");\n      socket.off(\"media_change\");\n      socket.off(\"playback_state\");\n      socket.off(\"time_update\");\n      socket.off(\"volume_change\");\n    };\n  }, []);\n\n  // Effect to sync media playback state\n  useEffect(() => {\n    if (mediaRef.current) {\n      if (isPlaying) {\n        console.log(\"Attempting to play video...\");\n        mediaRef.current.play()\n          .then(() => {\n            console.log(\"Playback started successfully\");\n          })\n          .catch((e) => {\n            console.error(\"Playback error:\", e);\n          });\n      } else {\n        mediaRef.current.pause();\n      }\n    }\n  }, [isPlaying, currentItem]);\n\n  const handleTimeUpdate = () => {\n    // We don't need to do anything special here\n    // Just let the video play smoothly\n  };\n  \n  const handleMediaEnded = () => {\n    console.log(\"Media playback ended\");\n    setIsPlaying(false);\n  };\n\n  return (\n    <div className=\"h-screen w-screen bg-black flex flex-col relative\">\n      <div className=\"flex-1 flex items-center justify-center overflow-hidden\">\n        {isCasting ? (\n          currentItem && currentItem.type === \"video\" ? (\n            <video\n              ref={mediaRef}\n              src={currentItem.path}\n              className=\"max-h-full max-w-full\"\n              preload=\"auto\"\n              playsInline\n              onTimeUpdate={handleTimeUpdate}\n              onEnded={handleMediaEnded}\n              // Add additional event handlers for debugging\n              onSeeked={() => console.log(\"Video seeked\")}\n              onError={(e) => console.error(\"Video error:\", e)}\n            />\n          ) : currentItem && currentItem.type === \"image\" ? (\n            <img\n              src={currentItem.path}\n              alt={currentItem.name}\n              className=\"max-h-full max-w-full object-contain\"\n            />\n          ) : (\n            <div className=\"text-gray-500\">Waiting for media...</div>\n          )\n        ) : (\n          <div className=\"text-center p-8\">\n            <div className=\"text-4xl text-gray-500 mb-4\">Waiting for Cast</div>\n            <p className=\"text-gray-400\">\n              The caster needs to press \"Start Casting\" to begin streaming content\n              to this player.\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}